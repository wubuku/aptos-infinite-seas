// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosinfiniteseas.aptos.contract.service;


import com.github.wubuku.aptos.bean.AccountResource;
import com.github.wubuku.aptos.utils.*;
import org.dddml.aptosinfiniteseas.aptos.contract.AptosAccount;
import org.dddml.aptosinfiniteseas.aptos.contract.ContractConstants;
import org.dddml.aptosinfiniteseas.aptos.contract.DomainBeanUtils;
import org.dddml.aptosinfiniteseas.aptos.contract.repository.AptosAccountRepository;
import org.dddml.aptosinfiniteseas.domain.player.*;
import org.dddml.aptosinfiniteseas.domain.*;
import org.dddml.aptosinfiniteseas.aptos.contract.Player;

import java.io.IOException;
import java.math.*;
import java.util.*;
import java.util.function.*;


public class AptosPlayerStateRetriever {

    private NodeApiClient aptosNodeApiClient;

    private String aptosContractAddress;

    private AptosAccountRepository aptosAccountRepository;

    private Function<String, PlayerState.MutablePlayerState> playerStateFactory;


    public AptosPlayerStateRetriever(NodeApiClient aptosNodeApiClient,
                                    String aptosContractAddress,
                                    AptosAccountRepository aptosAccountRepository,
                                    Function<String, PlayerState.MutablePlayerState> playerStateFactory
    ) {
        this.aptosNodeApiClient = aptosNodeApiClient;
        this.aptosContractAddress = aptosContractAddress;
        this.aptosAccountRepository = aptosAccountRepository;
        this.playerStateFactory = playerStateFactory;
    }

    public PlayerState retrievePlayerState(String id) {
        AccountResource<Player> accountResource;
        try {
            accountResource = aptosNodeApiClient.getAccountResource(id,
                    this.aptosContractAddress + "::" + ContractConstants.PLAYER_MODULE_PLAYER,
                    Player.class,
                    null);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        Player player = accountResource.getData();
        if (player == null) {
            return null;
        }
        player.setId(id);
        return toPlayerState(player);
    }

    private PlayerState toPlayerState(Player player) {
        PlayerState.MutablePlayerState playerState = playerStateFactory.apply(player.getId());
        playerState.setVersion(player.getVersion());
        playerState.setOwner(player.getOwner());
        playerState.setLevel(player.getLevel());
        playerState.setExperience(player.getExperience());
        playerState.setName(player.getName());
        playerState.setClaimedIsland(DomainBeanUtils.toCoordinates(player.getClaimedIsland().getVec().size() == 0 ? null : player.getClaimedIsland().getVec().get(0)));
        playerState.setInventory(java.util.Arrays.stream(player.getInventory()).map(x -> DomainBeanUtils.toItemIdQuantityPair(x)).collect(java.util.stream.Collectors.toSet()));
        return playerState;
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }

}

