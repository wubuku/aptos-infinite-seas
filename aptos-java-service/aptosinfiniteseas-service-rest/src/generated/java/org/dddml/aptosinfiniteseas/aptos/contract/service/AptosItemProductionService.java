// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosinfiniteseas.aptos.contract.service;

import com.github.wubuku.aptos.utils.NodeApiClient;
import org.dddml.aptosinfiniteseas.domain.*;
import org.dddml.aptosinfiniteseas.domain.itemproduction.*;
import org.dddml.aptosinfiniteseas.aptos.contract.repository.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.stream.*;
import java.util.*;
import java.math.*;

@Service
public class AptosItemProductionService {

    @Autowired
    private ItemProductionStateRepository itemProductionStateRepository;


    private AptosItemProductionStateRetriever aptosItemProductionStateRetriever;

    @Autowired
    public AptosItemProductionService(
        @Value("${aptos.contract.address}")
        String aptosContractAddress,
        NodeApiClient aptosNodeApiClient,
        AptosAccountRepository aptosAccountRepository
    ) {
        this.aptosItemProductionStateRetriever = new AptosItemProductionStateRetriever(
                aptosNodeApiClient,
                aptosContractAddress,
                aptosAccountRepository,
                itemProductionId -> {
                    ItemProductionState.MutableItemProductionState s = new AbstractItemProductionState.SimpleItemProductionState();
                    s.setItemProductionId(itemProductionId);
                    return s;
                }
        );
    }

    @Transactional
    public void updateItemProductionState(SkillTypeItemIdPair itemProductionId) {
        ItemProductionState itemProductionState = aptosItemProductionStateRetriever.retrieveItemProductionState(itemProductionId);
        if (itemProductionState == null) {
            return;
        }
        itemProductionStateRepository.merge(itemProductionState);
    }

}

