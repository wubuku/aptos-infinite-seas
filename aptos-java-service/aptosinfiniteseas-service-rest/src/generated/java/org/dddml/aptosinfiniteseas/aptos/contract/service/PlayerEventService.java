// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosinfiniteseas.aptos.contract.service;

import com.github.wubuku.aptos.bean.Event;
import com.github.wubuku.aptos.utils.NodeApiClient;

import org.dddml.aptosinfiniteseas.domain.player.AbstractPlayerEvent;
import org.dddml.aptosinfiniteseas.aptos.contract.ContractConstants;
import org.dddml.aptosinfiniteseas.aptos.contract.DomainBeanUtils;
import org.dddml.aptosinfiniteseas.aptos.contract.AptosAccount;

import org.dddml.aptosinfiniteseas.aptos.contract.player.PlayerCreated;
import org.dddml.aptosinfiniteseas.aptos.contract.player.PlayerUpdated;
import org.dddml.aptosinfiniteseas.aptos.contract.player.IslandClaimed;
import org.dddml.aptosinfiniteseas.aptos.contract.player.PlayerAirdropped;
import org.dddml.aptosinfiniteseas.aptos.contract.player.PlayerIslandResourcesGathered;
import org.dddml.aptosinfiniteseas.aptos.contract.repository.PlayerEventRepository;
import org.dddml.aptosinfiniteseas.aptos.contract.repository.AptosAccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.math.*;
import java.util.*;


@Service
public class PlayerEventService {

    @Value("${aptos.contract.address}")
    private String aptosContractAddress;

    @Autowired
    private AptosAccountRepository aptosAccountRepository;

    @Autowired
    private NodeApiClient aptosNodeApiClient;

    @Autowired
    private PlayerEventRepository playerEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractPlayerEvent event) {
        event.setEventStatus("D");
        playerEventRepository.save(event);
    }

    @Transactional
    public void pullPlayerCreatedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getPlayerCreatedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<PlayerCreated>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.PLAYER_MODULE_EVENTS,
                        ContractConstants.PLAYER_MODULE_PLAYER_CREATED_HANDLE_FIELD,
                        PlayerCreated.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<PlayerCreated> eventEnvelope : eventPage) {
                    savePlayerCreated(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getPlayerCreatedEventNextCursor() {
        AbstractPlayerEvent.PlayerCreated lastEvent = playerEventRepository.findFirstPlayerCreatedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void savePlayerCreated(Event<PlayerCreated> eventEnvelope) {
        AbstractPlayerEvent.PlayerCreated playerCreated = DomainBeanUtils.toPlayerCreated(eventEnvelope);
        if (playerEventRepository.findById(playerCreated.getPlayerEventId()).isPresent()) {
            return;
        }
        playerEventRepository.save(playerCreated);
    }

    @Transactional
    public void pullPlayerUpdatedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getPlayerUpdatedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<PlayerUpdated>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.PLAYER_MODULE_EVENTS,
                        ContractConstants.PLAYER_MODULE_PLAYER_UPDATED_HANDLE_FIELD,
                        PlayerUpdated.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<PlayerUpdated> eventEnvelope : eventPage) {
                    savePlayerUpdated(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getPlayerUpdatedEventNextCursor() {
        AbstractPlayerEvent.PlayerUpdated lastEvent = playerEventRepository.findFirstPlayerUpdatedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void savePlayerUpdated(Event<PlayerUpdated> eventEnvelope) {
        AbstractPlayerEvent.PlayerUpdated playerUpdated = DomainBeanUtils.toPlayerUpdated(eventEnvelope);
        if (playerEventRepository.findById(playerUpdated.getPlayerEventId()).isPresent()) {
            return;
        }
        playerEventRepository.save(playerUpdated);
    }

    @Transactional
    public void pullIslandClaimedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getIslandClaimedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<IslandClaimed>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.PLAYER_MODULE_EVENTS,
                        ContractConstants.PLAYER_MODULE_ISLAND_CLAIMED_HANDLE_FIELD,
                        IslandClaimed.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<IslandClaimed> eventEnvelope : eventPage) {
                    saveIslandClaimed(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getIslandClaimedEventNextCursor() {
        AbstractPlayerEvent.IslandClaimed lastEvent = playerEventRepository.findFirstIslandClaimedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveIslandClaimed(Event<IslandClaimed> eventEnvelope) {
        AbstractPlayerEvent.IslandClaimed islandClaimed = DomainBeanUtils.toIslandClaimed(eventEnvelope);
        if (playerEventRepository.findById(islandClaimed.getPlayerEventId()).isPresent()) {
            return;
        }
        playerEventRepository.save(islandClaimed);
    }

    @Transactional
    public void pullPlayerAirdroppedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getPlayerAirdroppedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<PlayerAirdropped>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.PLAYER_MODULE_EVENTS,
                        ContractConstants.PLAYER_MODULE_PLAYER_AIRDROPPED_HANDLE_FIELD,
                        PlayerAirdropped.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<PlayerAirdropped> eventEnvelope : eventPage) {
                    savePlayerAirdropped(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getPlayerAirdroppedEventNextCursor() {
        AbstractPlayerEvent.PlayerAirdropped lastEvent = playerEventRepository.findFirstPlayerAirdroppedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void savePlayerAirdropped(Event<PlayerAirdropped> eventEnvelope) {
        AbstractPlayerEvent.PlayerAirdropped playerAirdropped = DomainBeanUtils.toPlayerAirdropped(eventEnvelope);
        if (playerEventRepository.findById(playerAirdropped.getPlayerEventId()).isPresent()) {
            return;
        }
        playerEventRepository.save(playerAirdropped);
    }

    @Transactional
    public void pullPlayerIslandResourcesGatheredEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getPlayerIslandResourcesGatheredEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<PlayerIslandResourcesGathered>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.PLAYER_MODULE_EVENTS,
                        ContractConstants.PLAYER_MODULE_PLAYER_ISLAND_RESOURCES_GATHERED_HANDLE_FIELD,
                        PlayerIslandResourcesGathered.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<PlayerIslandResourcesGathered> eventEnvelope : eventPage) {
                    savePlayerIslandResourcesGathered(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getPlayerIslandResourcesGatheredEventNextCursor() {
        AbstractPlayerEvent.PlayerIslandResourcesGathered lastEvent = playerEventRepository.findFirstPlayerIslandResourcesGatheredByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void savePlayerIslandResourcesGathered(Event<PlayerIslandResourcesGathered> eventEnvelope) {
        AbstractPlayerEvent.PlayerIslandResourcesGathered playerIslandResourcesGathered = DomainBeanUtils.toPlayerIslandResourcesGathered(eventEnvelope);
        if (playerEventRepository.findById(playerIslandResourcesGathered.getPlayerEventId()).isPresent()) {
            return;
        }
        playerEventRepository.save(playerIslandResourcesGathered);
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }
}
