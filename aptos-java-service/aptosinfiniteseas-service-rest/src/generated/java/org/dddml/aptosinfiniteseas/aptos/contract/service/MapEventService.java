// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosinfiniteseas.aptos.contract.service;

import com.github.wubuku.aptos.bean.Event;
import com.github.wubuku.aptos.utils.NodeApiClient;

import org.dddml.aptosinfiniteseas.domain.map.AbstractMapEvent;
import org.dddml.aptosinfiniteseas.aptos.contract.ContractConstants;
import org.dddml.aptosinfiniteseas.aptos.contract.DomainBeanUtils;
import org.dddml.aptosinfiniteseas.aptos.contract.AptosAccount;

import org.dddml.aptosinfiniteseas.aptos.contract.map.MapInitialized;
import org.dddml.aptosinfiniteseas.aptos.contract.map.IslandAdded;
import org.dddml.aptosinfiniteseas.aptos.contract.map.MapIslandClaimed;
import org.dddml.aptosinfiniteseas.aptos.contract.map.IslandResourcesGathered;
import org.dddml.aptosinfiniteseas.aptos.contract.repository.MapEventRepository;
import org.dddml.aptosinfiniteseas.aptos.contract.repository.AptosAccountRepository;
import org.dddml.aptosinfiniteseas.aptos.contract.repository.MapLocationTableItemAddedRepository;
import org.dddml.aptosinfiniteseas.aptos.contract.MapLocationTableItemAdded;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.math.*;
import java.util.*;


@Service
public class MapEventService {

    @Value("${aptos.contract.address}")
    private String aptosContractAddress;

    @Autowired
    private AptosAccountRepository aptosAccountRepository;

    @Autowired
    private NodeApiClient aptosNodeApiClient;

    @Autowired
    private MapEventRepository mapEventRepository;

    @Autowired
    private MapLocationTableItemAddedRepository mapLocationTableItemAddedRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractMapEvent event) {
        event.setEventStatus("D");
        mapEventRepository.save(event);
    }

    @Transactional
    public void pullIslandAddedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getIslandAddedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<IslandAdded>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.MAP_MODULE_EVENTS,
                        ContractConstants.MAP_MODULE_ISLAND_ADDED_HANDLE_FIELD,
                        IslandAdded.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<IslandAdded> eventEnvelope : eventPage) {
                    eventEnvelope.getData().setAccountAddress(resourceAccountAddress);
                    saveIslandAdded(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getIslandAddedEventNextCursor() {
        AbstractMapEvent.IslandAdded lastEvent = mapEventRepository.findFirstIslandAddedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveIslandAdded(Event<IslandAdded> eventEnvelope) {
        AbstractMapEvent.IslandAdded islandAdded = DomainBeanUtils.toIslandAdded(eventEnvelope);
        if (mapEventRepository.findById(islandAdded.getMapEventId()).isPresent()) {
            return;
        }
        mapEventRepository.save(islandAdded);
    }

    @Transactional
    public void pullMapIslandClaimedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getMapIslandClaimedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<MapIslandClaimed>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.MAP_MODULE_EVENTS,
                        ContractConstants.MAP_MODULE_MAP_ISLAND_CLAIMED_HANDLE_FIELD,
                        MapIslandClaimed.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<MapIslandClaimed> eventEnvelope : eventPage) {
                    eventEnvelope.getData().setAccountAddress(resourceAccountAddress);
                    saveMapIslandClaimed(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getMapIslandClaimedEventNextCursor() {
        AbstractMapEvent.MapIslandClaimed lastEvent = mapEventRepository.findFirstMapIslandClaimedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveMapIslandClaimed(Event<MapIslandClaimed> eventEnvelope) {
        AbstractMapEvent.MapIslandClaimed mapIslandClaimed = DomainBeanUtils.toMapIslandClaimed(eventEnvelope);
        if (mapEventRepository.findById(mapIslandClaimed.getMapEventId()).isPresent()) {
            return;
        }
        mapEventRepository.save(mapIslandClaimed);
    }

    @Transactional
    public void pullIslandResourcesGatheredEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getIslandResourcesGatheredEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<IslandResourcesGathered>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.MAP_MODULE_EVENTS,
                        ContractConstants.MAP_MODULE_ISLAND_RESOURCES_GATHERED_HANDLE_FIELD,
                        IslandResourcesGathered.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<IslandResourcesGathered> eventEnvelope : eventPage) {
                    eventEnvelope.getData().setAccountAddress(resourceAccountAddress);
                    saveIslandResourcesGathered(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getIslandResourcesGatheredEventNextCursor() {
        AbstractMapEvent.IslandResourcesGathered lastEvent = mapEventRepository.findFirstIslandResourcesGatheredByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveIslandResourcesGathered(Event<IslandResourcesGathered> eventEnvelope) {
        AbstractMapEvent.IslandResourcesGathered islandResourcesGathered = DomainBeanUtils.toIslandResourcesGathered(eventEnvelope);
        if (mapEventRepository.findById(islandResourcesGathered.getMapEventId()).isPresent()) {
            return;
        }
        mapEventRepository.save(islandResourcesGathered);
    }

    @Transactional
    public void pullMapLocationTableItemAddedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getMapLocationTableItemAddedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<MapLocationTableItemAdded>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.MAP_MODULE_EVENTS,
                        ContractConstants.MAP_LOCATION_TABLE_ITEM_ADDED_HANDLE_FIELD,
                        MapLocationTableItemAdded.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<MapLocationTableItemAdded> eventEnvelope : eventPage) {
                    eventEnvelope.getData().setMapAccountAddress(resourceAccountAddress);
                    saveMapLocationTableItemAdded(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getMapLocationTableItemAddedEventNextCursor() {
        org.dddml.aptosinfiniteseas.aptos.contract.persistence.MapLocationTableItemAdded lastEvent = mapLocationTableItemAddedRepository.findFirstByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveMapLocationTableItemAdded(Event<MapLocationTableItemAdded> eventEnvelope) {
        org.dddml.aptosinfiniteseas.aptos.contract.persistence.MapLocationTableItemAdded mapLocationTableItemAdded = DomainBeanUtils.toPersistenceMapLocationTableItemAdded(eventEnvelope);
        if (mapLocationTableItemAddedRepository.findById(mapLocationTableItemAdded.getMapLocationId()).isPresent()) {
            return;
        }
        mapLocationTableItemAddedRepository.save(mapLocationTableItemAdded);
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }
}
