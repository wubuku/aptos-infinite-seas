// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosinfiniteseas.aptos.contract.service;

import com.github.wubuku.aptos.bean.Event;
import com.github.wubuku.aptos.utils.NodeApiClient;

import org.dddml.aptosinfiniteseas.domain.roster.AbstractRosterEvent;
import org.dddml.aptosinfiniteseas.aptos.contract.ContractConstants;
import org.dddml.aptosinfiniteseas.aptos.contract.DomainBeanUtils;
import org.dddml.aptosinfiniteseas.aptos.contract.AptosAccount;

import org.dddml.aptosinfiniteseas.aptos.contract.roster.RosterCreated;
import org.dddml.aptosinfiniteseas.aptos.contract.roster.EnvironmentRosterCreated;
import org.dddml.aptosinfiniteseas.aptos.contract.roster.RosterShipAdded;
import org.dddml.aptosinfiniteseas.aptos.contract.roster.RosterSetSail;
import org.dddml.aptosinfiniteseas.aptos.contract.roster.RosterShipsPositionAdjusted;
import org.dddml.aptosinfiniteseas.aptos.contract.roster.RosterShipTransferred;
import org.dddml.aptosinfiniteseas.aptos.contract.roster.RosterShipInventoryTransferred;
import org.dddml.aptosinfiniteseas.aptos.contract.roster.RosterShipInventoryTakenOut;
import org.dddml.aptosinfiniteseas.aptos.contract.roster.RosterShipInventoryPutIn;
import org.dddml.aptosinfiniteseas.aptos.contract.repository.RosterEventRepository;
import org.dddml.aptosinfiniteseas.aptos.contract.repository.AptosAccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.math.*;
import java.util.*;


@Service
public class RosterEventService {

    @Value("${aptos.contract.address}")
    private String aptosContractAddress;

    @Autowired
    private AptosAccountRepository aptosAccountRepository;

    @Autowired
    private NodeApiClient aptosNodeApiClient;

    @Autowired
    private RosterEventRepository rosterEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractRosterEvent event) {
        event.setEventStatus("D");
        rosterEventRepository.save(event);
    }

    @Transactional
    public void pullRosterCreatedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getRosterCreatedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<RosterCreated>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.ROSTER_MODULE_EVENTS,
                        ContractConstants.ROSTER_MODULE_ROSTER_CREATED_HANDLE_FIELD,
                        RosterCreated.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<RosterCreated> eventEnvelope : eventPage) {
                    saveRosterCreated(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getRosterCreatedEventNextCursor() {
        AbstractRosterEvent.RosterCreated lastEvent = rosterEventRepository.findFirstRosterCreatedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveRosterCreated(Event<RosterCreated> eventEnvelope) {
        AbstractRosterEvent.RosterCreated rosterCreated = DomainBeanUtils.toRosterCreated(eventEnvelope);
        if (rosterEventRepository.findById(rosterCreated.getRosterEventId()).isPresent()) {
            return;
        }
        rosterEventRepository.save(rosterCreated);
    }

    @Transactional
    public void pullEnvironmentRosterCreatedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getEnvironmentRosterCreatedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<EnvironmentRosterCreated>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.ROSTER_MODULE_EVENTS,
                        ContractConstants.ROSTER_MODULE_ENVIRONMENT_ROSTER_CREATED_HANDLE_FIELD,
                        EnvironmentRosterCreated.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<EnvironmentRosterCreated> eventEnvelope : eventPage) {
                    saveEnvironmentRosterCreated(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getEnvironmentRosterCreatedEventNextCursor() {
        AbstractRosterEvent.EnvironmentRosterCreated lastEvent = rosterEventRepository.findFirstEnvironmentRosterCreatedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveEnvironmentRosterCreated(Event<EnvironmentRosterCreated> eventEnvelope) {
        AbstractRosterEvent.EnvironmentRosterCreated environmentRosterCreated = DomainBeanUtils.toEnvironmentRosterCreated(eventEnvelope);
        if (rosterEventRepository.findById(environmentRosterCreated.getRosterEventId()).isPresent()) {
            return;
        }
        rosterEventRepository.save(environmentRosterCreated);
    }

    @Transactional
    public void pullRosterShipAddedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getRosterShipAddedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<RosterShipAdded>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.ROSTER_MODULE_EVENTS,
                        ContractConstants.ROSTER_MODULE_ROSTER_SHIP_ADDED_HANDLE_FIELD,
                        RosterShipAdded.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<RosterShipAdded> eventEnvelope : eventPage) {
                    saveRosterShipAdded(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getRosterShipAddedEventNextCursor() {
        AbstractRosterEvent.RosterShipAdded lastEvent = rosterEventRepository.findFirstRosterShipAddedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveRosterShipAdded(Event<RosterShipAdded> eventEnvelope) {
        AbstractRosterEvent.RosterShipAdded rosterShipAdded = DomainBeanUtils.toRosterShipAdded(eventEnvelope);
        if (rosterEventRepository.findById(rosterShipAdded.getRosterEventId()).isPresent()) {
            return;
        }
        rosterEventRepository.save(rosterShipAdded);
    }

    @Transactional
    public void pullRosterSetSailEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getRosterSetSailEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<RosterSetSail>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.ROSTER_MODULE_EVENTS,
                        ContractConstants.ROSTER_MODULE_ROSTER_SET_SAIL_HANDLE_FIELD,
                        RosterSetSail.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<RosterSetSail> eventEnvelope : eventPage) {
                    saveRosterSetSail(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getRosterSetSailEventNextCursor() {
        AbstractRosterEvent.RosterSetSail lastEvent = rosterEventRepository.findFirstRosterSetSailByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveRosterSetSail(Event<RosterSetSail> eventEnvelope) {
        AbstractRosterEvent.RosterSetSail rosterSetSail = DomainBeanUtils.toRosterSetSail(eventEnvelope);
        if (rosterEventRepository.findById(rosterSetSail.getRosterEventId()).isPresent()) {
            return;
        }
        rosterEventRepository.save(rosterSetSail);
    }

    @Transactional
    public void pullRosterShipsPositionAdjustedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getRosterShipsPositionAdjustedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<RosterShipsPositionAdjusted>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.ROSTER_MODULE_EVENTS,
                        ContractConstants.ROSTER_MODULE_ROSTER_SHIPS_POSITION_ADJUSTED_HANDLE_FIELD,
                        RosterShipsPositionAdjusted.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<RosterShipsPositionAdjusted> eventEnvelope : eventPage) {
                    saveRosterShipsPositionAdjusted(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getRosterShipsPositionAdjustedEventNextCursor() {
        AbstractRosterEvent.RosterShipsPositionAdjusted lastEvent = rosterEventRepository.findFirstRosterShipsPositionAdjustedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveRosterShipsPositionAdjusted(Event<RosterShipsPositionAdjusted> eventEnvelope) {
        AbstractRosterEvent.RosterShipsPositionAdjusted rosterShipsPositionAdjusted = DomainBeanUtils.toRosterShipsPositionAdjusted(eventEnvelope);
        if (rosterEventRepository.findById(rosterShipsPositionAdjusted.getRosterEventId()).isPresent()) {
            return;
        }
        rosterEventRepository.save(rosterShipsPositionAdjusted);
    }

    @Transactional
    public void pullRosterShipTransferredEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getRosterShipTransferredEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<RosterShipTransferred>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.ROSTER_MODULE_EVENTS,
                        ContractConstants.ROSTER_MODULE_ROSTER_SHIP_TRANSFERRED_HANDLE_FIELD,
                        RosterShipTransferred.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<RosterShipTransferred> eventEnvelope : eventPage) {
                    saveRosterShipTransferred(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getRosterShipTransferredEventNextCursor() {
        AbstractRosterEvent.RosterShipTransferred lastEvent = rosterEventRepository.findFirstRosterShipTransferredByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveRosterShipTransferred(Event<RosterShipTransferred> eventEnvelope) {
        AbstractRosterEvent.RosterShipTransferred rosterShipTransferred = DomainBeanUtils.toRosterShipTransferred(eventEnvelope);
        if (rosterEventRepository.findById(rosterShipTransferred.getRosterEventId()).isPresent()) {
            return;
        }
        rosterEventRepository.save(rosterShipTransferred);
    }

    @Transactional
    public void pullRosterShipInventoryTransferredEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getRosterShipInventoryTransferredEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<RosterShipInventoryTransferred>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.ROSTER_MODULE_EVENTS,
                        ContractConstants.ROSTER_MODULE_ROSTER_SHIP_INVENTORY_TRANSFERRED_HANDLE_FIELD,
                        RosterShipInventoryTransferred.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<RosterShipInventoryTransferred> eventEnvelope : eventPage) {
                    saveRosterShipInventoryTransferred(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getRosterShipInventoryTransferredEventNextCursor() {
        AbstractRosterEvent.RosterShipInventoryTransferred lastEvent = rosterEventRepository.findFirstRosterShipInventoryTransferredByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveRosterShipInventoryTransferred(Event<RosterShipInventoryTransferred> eventEnvelope) {
        AbstractRosterEvent.RosterShipInventoryTransferred rosterShipInventoryTransferred = DomainBeanUtils.toRosterShipInventoryTransferred(eventEnvelope);
        if (rosterEventRepository.findById(rosterShipInventoryTransferred.getRosterEventId()).isPresent()) {
            return;
        }
        rosterEventRepository.save(rosterShipInventoryTransferred);
    }

    @Transactional
    public void pullRosterShipInventoryTakenOutEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getRosterShipInventoryTakenOutEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<RosterShipInventoryTakenOut>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.ROSTER_MODULE_EVENTS,
                        ContractConstants.ROSTER_MODULE_ROSTER_SHIP_INVENTORY_TAKEN_OUT_HANDLE_FIELD,
                        RosterShipInventoryTakenOut.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<RosterShipInventoryTakenOut> eventEnvelope : eventPage) {
                    saveRosterShipInventoryTakenOut(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getRosterShipInventoryTakenOutEventNextCursor() {
        AbstractRosterEvent.RosterShipInventoryTakenOut lastEvent = rosterEventRepository.findFirstRosterShipInventoryTakenOutByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveRosterShipInventoryTakenOut(Event<RosterShipInventoryTakenOut> eventEnvelope) {
        AbstractRosterEvent.RosterShipInventoryTakenOut rosterShipInventoryTakenOut = DomainBeanUtils.toRosterShipInventoryTakenOut(eventEnvelope);
        if (rosterEventRepository.findById(rosterShipInventoryTakenOut.getRosterEventId()).isPresent()) {
            return;
        }
        rosterEventRepository.save(rosterShipInventoryTakenOut);
    }

    @Transactional
    public void pullRosterShipInventoryPutInEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getRosterShipInventoryPutInEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<RosterShipInventoryPutIn>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.ROSTER_MODULE_EVENTS,
                        ContractConstants.ROSTER_MODULE_ROSTER_SHIP_INVENTORY_PUT_IN_HANDLE_FIELD,
                        RosterShipInventoryPutIn.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<RosterShipInventoryPutIn> eventEnvelope : eventPage) {
                    saveRosterShipInventoryPutIn(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getRosterShipInventoryPutInEventNextCursor() {
        AbstractRosterEvent.RosterShipInventoryPutIn lastEvent = rosterEventRepository.findFirstRosterShipInventoryPutInByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveRosterShipInventoryPutIn(Event<RosterShipInventoryPutIn> eventEnvelope) {
        AbstractRosterEvent.RosterShipInventoryPutIn rosterShipInventoryPutIn = DomainBeanUtils.toRosterShipInventoryPutIn(eventEnvelope);
        if (rosterEventRepository.findById(rosterShipInventoryPutIn.getRosterEventId()).isPresent()) {
            return;
        }
        rosterEventRepository.save(rosterShipInventoryPutIn);
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }
}
