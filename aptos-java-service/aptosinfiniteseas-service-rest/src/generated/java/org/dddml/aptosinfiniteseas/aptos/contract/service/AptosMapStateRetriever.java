// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosinfiniteseas.aptos.contract.service;


import com.github.wubuku.aptos.bean.AccountResource;
import com.github.wubuku.aptos.utils.*;
import org.dddml.aptosinfiniteseas.aptos.contract.AptosAccount;
import org.dddml.aptosinfiniteseas.aptos.contract.ContractConstants;
import org.dddml.aptosinfiniteseas.aptos.contract.DomainBeanUtils;
import org.dddml.aptosinfiniteseas.aptos.contract.repository.AptosAccountRepository;
import org.dddml.aptosinfiniteseas.domain.map.*;
import org.dddml.aptosinfiniteseas.domain.*;
import org.dddml.aptosinfiniteseas.aptos.contract.Map;
import org.dddml.aptosinfiniteseas.aptos.contract.MapLocation;

import java.io.IOException;
import java.math.*;
import java.util.*;
import java.util.function.*;


public class AptosMapStateRetriever {

    private NodeApiClient aptosNodeApiClient;

    private String aptosContractAddress;

    private AptosAccountRepository aptosAccountRepository;

    private Function<String, MapState.MutableMapState> mapStateFactory;

    private BiFunction<MapState, Coordinates, MapLocationState.MutableMapLocationState> mapLocationStateFactory;

    private MapLocationCoordinatesGetter mapLocationCoordinatesGetter;


    public AptosMapStateRetriever(NodeApiClient aptosNodeApiClient,
                                    String aptosContractAddress,
                                    AptosAccountRepository aptosAccountRepository,
                                    Function<String, MapState.MutableMapState> mapStateFactory,
                                    BiFunction<MapState, Coordinates, MapLocationState.MutableMapLocationState> mapLocationStateFactory,
                                    MapLocationCoordinatesGetter mapLocationCoordinatesGetter
    ) {
        this.aptosNodeApiClient = aptosNodeApiClient;
        this.aptosContractAddress = aptosContractAddress;
        this.aptosAccountRepository = aptosAccountRepository;
        this.mapStateFactory = mapStateFactory;
        this.mapLocationStateFactory = mapLocationStateFactory;
        this.mapLocationCoordinatesGetter = mapLocationCoordinatesGetter;
    }

    public MapState retrieveMapState(String accountAddress) {
        String resourceAccountAddress = getResourceAccountAddress();
        AccountResource<Map> accountResource;
        try {
            accountResource = aptosNodeApiClient.getAccountResource(resourceAccountAddress,
                    this.aptosContractAddress + "::" + ContractConstants.MAP_MODULE_MAP,
                    Map.class,
                    null);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        Map map = accountResource.getData();
        map.setAccountAddress(resourceAccountAddress);
        return toMapState(map);
    }

    private MapState toMapState(Map map) {
        MapState.MutableMapState mapState = mapStateFactory.apply(map.getAccountAddress());
        mapState.setVersion(map.getVersion());
        if (map.getLocations() != null) {
            String mapLocationTableHandle = map.getLocations().getInner().getHandle();
            List<MapLocation> locations = getMapLocations(mapLocationTableHandle, mapLocationCoordinatesGetter.getMapLocationCoordinates(mapState.getAccountAddress()));
            for (MapLocation i : locations) {
                ((EntityStateCollection.ModifiableEntityStateCollection)mapState.getLocations()).add(toMapLocationState(mapState, i));
            }
        }

        return mapState;
    }

    private MapLocationState toMapLocationState(MapState mapState, MapLocation mapLocation) {
        MapLocationState.MutableMapLocationState mapLocationState = mapLocationStateFactory.apply(mapState, DomainBeanUtils.toCoordinates(mapLocation.getCoordinates()));
        mapLocationState.setType(mapLocation.getType());
        mapLocationState.setOccupiedBy(mapLocation.getOccupiedBy().getVec().size() == 0 ? null : mapLocation.getOccupiedBy().getVec().get(0));
        mapLocationState.setResources(java.util.Arrays.stream(mapLocation.getResources()).map(x -> DomainBeanUtils.toItemIdQuantityPair(x)).collect(java.util.stream.Collectors.toSet()));
        mapLocationState.setGatheredAt(mapLocation.getGatheredAt());
        return mapLocationState;
    }

    private List<MapLocation> getMapLocations(String mapLocationTableHandle, List<Coordinates> coordinates) {
        List<MapLocation> mapLocations = new ArrayList<>();

        for (Coordinates coordinates_ : coordinates) {
            MapLocation mapLocation;
            try {
                mapLocation = aptosNodeApiClient.getTableItem(
                        mapLocationTableHandle,
                        ContractConstants.toNumericalAddressType(ContractConstants.MAP_LOCATION_ID_TYPE, this.aptosContractAddress),
                        this.aptosContractAddress + "::" + ContractConstants.MAP_LOCATION_MODULE_MAP_LOCATION,
                        coordinates_,
                        MapLocation.class,
                        null
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            if (mapLocation != null)
            {
                mapLocations.add(mapLocation);
            }
        }
        return mapLocations;
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }

    public interface MapLocationCoordinatesGetter {
        List<Coordinates> getMapLocationCoordinates(String mapAccountAddress);
    }

}

