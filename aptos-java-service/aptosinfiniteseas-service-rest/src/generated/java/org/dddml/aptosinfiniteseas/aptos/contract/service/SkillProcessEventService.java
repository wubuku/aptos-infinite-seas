// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosinfiniteseas.aptos.contract.service;

import com.github.wubuku.aptos.bean.Event;
import com.github.wubuku.aptos.utils.NodeApiClient;

import org.dddml.aptosinfiniteseas.domain.skillprocess.AbstractSkillProcessEvent;
import org.dddml.aptosinfiniteseas.aptos.contract.ContractConstants;
import org.dddml.aptosinfiniteseas.aptos.contract.DomainBeanUtils;
import org.dddml.aptosinfiniteseas.aptos.contract.AptosAccount;

import org.dddml.aptosinfiniteseas.aptos.contract.skillprocess.SkillProcessCreated;
import org.dddml.aptosinfiniteseas.aptos.contract.skillprocess.ProductionProcessStarted;
import org.dddml.aptosinfiniteseas.aptos.contract.skillprocess.ProductionProcessCompleted;
import org.dddml.aptosinfiniteseas.aptos.contract.skillprocess.ShipProductionProcessStarted;
import org.dddml.aptosinfiniteseas.aptos.contract.skillprocess.ShipProductionProcessCompleted;
import org.dddml.aptosinfiniteseas.aptos.contract.skillprocess.CreationProcessStarted;
import org.dddml.aptosinfiniteseas.aptos.contract.skillprocess.CreationProcessCompleted;
import org.dddml.aptosinfiniteseas.aptos.contract.repository.SkillProcessEventRepository;
import org.dddml.aptosinfiniteseas.aptos.contract.repository.AptosAccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.math.*;
import java.util.*;


@Service
public class SkillProcessEventService {

    @Value("${aptos.contract.address}")
    private String aptosContractAddress;

    @Autowired
    private AptosAccountRepository aptosAccountRepository;

    @Autowired
    private NodeApiClient aptosNodeApiClient;

    @Autowired
    private SkillProcessEventRepository skillProcessEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractSkillProcessEvent event) {
        event.setEventStatus("D");
        skillProcessEventRepository.save(event);
    }

    @Transactional
    public void pullSkillProcessCreatedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getSkillProcessCreatedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<SkillProcessCreated>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.SKILL_PROCESS_MODULE_EVENTS,
                        ContractConstants.SKILL_PROCESS_MODULE_SKILL_PROCESS_CREATED_HANDLE_FIELD,
                        SkillProcessCreated.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<SkillProcessCreated> eventEnvelope : eventPage) {
                    saveSkillProcessCreated(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getSkillProcessCreatedEventNextCursor() {
        AbstractSkillProcessEvent.SkillProcessCreated lastEvent = skillProcessEventRepository.findFirstSkillProcessCreatedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveSkillProcessCreated(Event<SkillProcessCreated> eventEnvelope) {
        AbstractSkillProcessEvent.SkillProcessCreated skillProcessCreated = DomainBeanUtils.toSkillProcessCreated(eventEnvelope);
        if (skillProcessEventRepository.findById(skillProcessCreated.getSkillProcessEventId()).isPresent()) {
            return;
        }
        skillProcessEventRepository.save(skillProcessCreated);
    }

    @Transactional
    public void pullProductionProcessStartedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getProductionProcessStartedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<ProductionProcessStarted>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.SKILL_PROCESS_MODULE_EVENTS,
                        ContractConstants.SKILL_PROCESS_MODULE_PRODUCTION_PROCESS_STARTED_HANDLE_FIELD,
                        ProductionProcessStarted.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<ProductionProcessStarted> eventEnvelope : eventPage) {
                    saveProductionProcessStarted(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getProductionProcessStartedEventNextCursor() {
        AbstractSkillProcessEvent.ProductionProcessStarted lastEvent = skillProcessEventRepository.findFirstProductionProcessStartedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveProductionProcessStarted(Event<ProductionProcessStarted> eventEnvelope) {
        AbstractSkillProcessEvent.ProductionProcessStarted productionProcessStarted = DomainBeanUtils.toProductionProcessStarted(eventEnvelope);
        if (skillProcessEventRepository.findById(productionProcessStarted.getSkillProcessEventId()).isPresent()) {
            return;
        }
        skillProcessEventRepository.save(productionProcessStarted);
    }

    @Transactional
    public void pullProductionProcessCompletedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getProductionProcessCompletedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<ProductionProcessCompleted>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.SKILL_PROCESS_MODULE_EVENTS,
                        ContractConstants.SKILL_PROCESS_MODULE_PRODUCTION_PROCESS_COMPLETED_HANDLE_FIELD,
                        ProductionProcessCompleted.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<ProductionProcessCompleted> eventEnvelope : eventPage) {
                    saveProductionProcessCompleted(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getProductionProcessCompletedEventNextCursor() {
        AbstractSkillProcessEvent.ProductionProcessCompleted lastEvent = skillProcessEventRepository.findFirstProductionProcessCompletedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveProductionProcessCompleted(Event<ProductionProcessCompleted> eventEnvelope) {
        AbstractSkillProcessEvent.ProductionProcessCompleted productionProcessCompleted = DomainBeanUtils.toProductionProcessCompleted(eventEnvelope);
        if (skillProcessEventRepository.findById(productionProcessCompleted.getSkillProcessEventId()).isPresent()) {
            return;
        }
        skillProcessEventRepository.save(productionProcessCompleted);
    }

    @Transactional
    public void pullShipProductionProcessStartedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getShipProductionProcessStartedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<ShipProductionProcessStarted>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.SKILL_PROCESS_MODULE_EVENTS,
                        ContractConstants.SKILL_PROCESS_MODULE_SHIP_PRODUCTION_PROCESS_STARTED_HANDLE_FIELD,
                        ShipProductionProcessStarted.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<ShipProductionProcessStarted> eventEnvelope : eventPage) {
                    saveShipProductionProcessStarted(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getShipProductionProcessStartedEventNextCursor() {
        AbstractSkillProcessEvent.ShipProductionProcessStarted lastEvent = skillProcessEventRepository.findFirstShipProductionProcessStartedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveShipProductionProcessStarted(Event<ShipProductionProcessStarted> eventEnvelope) {
        AbstractSkillProcessEvent.ShipProductionProcessStarted shipProductionProcessStarted = DomainBeanUtils.toShipProductionProcessStarted(eventEnvelope);
        if (skillProcessEventRepository.findById(shipProductionProcessStarted.getSkillProcessEventId()).isPresent()) {
            return;
        }
        skillProcessEventRepository.save(shipProductionProcessStarted);
    }

    @Transactional
    public void pullShipProductionProcessCompletedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getShipProductionProcessCompletedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<ShipProductionProcessCompleted>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.SKILL_PROCESS_MODULE_EVENTS,
                        ContractConstants.SKILL_PROCESS_MODULE_SHIP_PRODUCTION_PROCESS_COMPLETED_HANDLE_FIELD,
                        ShipProductionProcessCompleted.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<ShipProductionProcessCompleted> eventEnvelope : eventPage) {
                    saveShipProductionProcessCompleted(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getShipProductionProcessCompletedEventNextCursor() {
        AbstractSkillProcessEvent.ShipProductionProcessCompleted lastEvent = skillProcessEventRepository.findFirstShipProductionProcessCompletedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveShipProductionProcessCompleted(Event<ShipProductionProcessCompleted> eventEnvelope) {
        AbstractSkillProcessEvent.ShipProductionProcessCompleted shipProductionProcessCompleted = DomainBeanUtils.toShipProductionProcessCompleted(eventEnvelope);
        if (skillProcessEventRepository.findById(shipProductionProcessCompleted.getSkillProcessEventId()).isPresent()) {
            return;
        }
        skillProcessEventRepository.save(shipProductionProcessCompleted);
    }

    @Transactional
    public void pullCreationProcessStartedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getCreationProcessStartedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<CreationProcessStarted>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.SKILL_PROCESS_MODULE_EVENTS,
                        ContractConstants.SKILL_PROCESS_MODULE_CREATION_PROCESS_STARTED_HANDLE_FIELD,
                        CreationProcessStarted.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<CreationProcessStarted> eventEnvelope : eventPage) {
                    saveCreationProcessStarted(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getCreationProcessStartedEventNextCursor() {
        AbstractSkillProcessEvent.CreationProcessStarted lastEvent = skillProcessEventRepository.findFirstCreationProcessStartedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveCreationProcessStarted(Event<CreationProcessStarted> eventEnvelope) {
        AbstractSkillProcessEvent.CreationProcessStarted creationProcessStarted = DomainBeanUtils.toCreationProcessStarted(eventEnvelope);
        if (skillProcessEventRepository.findById(creationProcessStarted.getSkillProcessEventId()).isPresent()) {
            return;
        }
        skillProcessEventRepository.save(creationProcessStarted);
    }

    @Transactional
    public void pullCreationProcessCompletedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getCreationProcessCompletedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<CreationProcessCompleted>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.SKILL_PROCESS_MODULE_EVENTS,
                        ContractConstants.SKILL_PROCESS_MODULE_CREATION_PROCESS_COMPLETED_HANDLE_FIELD,
                        CreationProcessCompleted.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<CreationProcessCompleted> eventEnvelope : eventPage) {
                    saveCreationProcessCompleted(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getCreationProcessCompletedEventNextCursor() {
        AbstractSkillProcessEvent.CreationProcessCompleted lastEvent = skillProcessEventRepository.findFirstCreationProcessCompletedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveCreationProcessCompleted(Event<CreationProcessCompleted> eventEnvelope) {
        AbstractSkillProcessEvent.CreationProcessCompleted creationProcessCompleted = DomainBeanUtils.toCreationProcessCompleted(eventEnvelope);
        if (skillProcessEventRepository.findById(creationProcessCompleted.getSkillProcessEventId()).isPresent()) {
            return;
        }
        skillProcessEventRepository.save(creationProcessCompleted);
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }
}
