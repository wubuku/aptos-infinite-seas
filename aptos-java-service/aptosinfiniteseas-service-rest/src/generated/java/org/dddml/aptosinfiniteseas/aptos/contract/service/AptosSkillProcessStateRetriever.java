// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosinfiniteseas.aptos.contract.service;


import com.github.wubuku.aptos.bean.AccountResource;
import com.github.wubuku.aptos.utils.*;
import org.dddml.aptosinfiniteseas.aptos.contract.AptosAccount;
import org.dddml.aptosinfiniteseas.aptos.contract.ContractConstants;
import org.dddml.aptosinfiniteseas.aptos.contract.DomainBeanUtils;
import org.dddml.aptosinfiniteseas.aptos.contract.repository.AptosAccountRepository;
import org.dddml.aptosinfiniteseas.domain.skillprocess.*;
import org.dddml.aptosinfiniteseas.domain.*;
import org.dddml.aptosinfiniteseas.aptos.contract.SkillProcess;

import java.io.IOException;
import java.math.*;
import java.util.*;
import java.util.function.*;


public class AptosSkillProcessStateRetriever {

    private NodeApiClient aptosNodeApiClient;

    private String aptosContractAddress;

    private AptosAccountRepository aptosAccountRepository;

    private Function<String, SkillProcessState.MutableSkillProcessState> skillProcessStateFactory;


    public AptosSkillProcessStateRetriever(NodeApiClient aptosNodeApiClient,
                                    String aptosContractAddress,
                                    AptosAccountRepository aptosAccountRepository,
                                    Function<String, SkillProcessState.MutableSkillProcessState> skillProcessStateFactory
    ) {
        this.aptosNodeApiClient = aptosNodeApiClient;
        this.aptosContractAddress = aptosContractAddress;
        this.aptosAccountRepository = aptosAccountRepository;
        this.skillProcessStateFactory = skillProcessStateFactory;
    }

    public SkillProcessState retrieveSkillProcessState(String id) {
        AccountResource<SkillProcess> accountResource;
        try {
            accountResource = aptosNodeApiClient.getAccountResource(id,
                    this.aptosContractAddress + "::" + ContractConstants.SKILL_PROCESS_MODULE_SKILL_PROCESS,
                    SkillProcess.class,
                    null);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        SkillProcess skillProcess = accountResource.getData();
        if (skillProcess == null) {
            return null;
        }
        skillProcess.setId(id);
        return toSkillProcessState(skillProcess);
    }

    private SkillProcessState toSkillProcessState(SkillProcess skillProcess) {
        SkillProcessState.MutableSkillProcessState skillProcessState = skillProcessStateFactory.apply(skillProcess.getId());
        skillProcessState.setVersion(skillProcess.getVersion());
        skillProcessState.setSkillProcessId(DomainBeanUtils.toSkillProcessId(skillProcess.getSkillProcessId()));
        skillProcessState.setItemId(skillProcess.getItemId());
        skillProcessState.setStartedAt(skillProcess.getStartedAt());
        skillProcessState.setCreationTime(skillProcess.getCreationTime());
        skillProcessState.setCompleted(skillProcess.getCompleted());
        skillProcessState.setEndedAt(skillProcess.getEndedAt());
        skillProcessState.setProductionMaterials(DomainBeanUtils.toItemIdQuantityPairs(skillProcess.getProductionMaterials().getVec().size() == 0 ? null : skillProcess.getProductionMaterials().getVec().get(0)));
        skillProcessState.setBatchSize(skillProcess.getBatchSize());
        return skillProcessState;
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }

}

