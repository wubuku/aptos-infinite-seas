// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosinfiniteseas.domain.itemcreation;

import java.util.*;
import java.math.*;
import org.dddml.aptosinfiniteseas.domain.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.aptosinfiniteseas.specialization.*;
import org.dddml.aptosinfiniteseas.domain.itemcreation.ItemCreationEvent.*;

public abstract class AbstractItemCreationState implements ItemCreationState.SqlItemCreationState {

    private SkillTypeItemIdPair itemCreationId;

    public SkillTypeItemIdPair getItemCreationId() {
        return this.itemCreationId;
    }

    public void setItemCreationId(SkillTypeItemIdPair itemCreationId) {
        this.itemCreationId = itemCreationId;
    }

    private Long resourceCost;

    public Long getResourceCost() {
        return this.resourceCost;
    }

    public void setResourceCost(Long resourceCost) {
        this.resourceCost = resourceCost;
    }

    private Integer requirementsLevel;

    public Integer getRequirementsLevel() {
        return this.requirementsLevel;
    }

    public void setRequirementsLevel(Integer requirementsLevel) {
        this.requirementsLevel = requirementsLevel;
    }

    private Long baseQuantity;

    public Long getBaseQuantity() {
        return this.baseQuantity;
    }

    public void setBaseQuantity(Long baseQuantity) {
        this.baseQuantity = baseQuantity;
    }

    private Long baseExperience;

    public Long getBaseExperience() {
        return this.baseExperience;
    }

    public void setBaseExperience(Long baseExperience) {
        this.baseExperience = baseExperience;
    }

    private BigInteger baseCreationTime;

    public BigInteger getBaseCreationTime() {
        return this.baseCreationTime;
    }

    public void setBaseCreationTime(BigInteger baseCreationTime) {
        this.baseCreationTime = baseCreationTime;
    }

    private BigInteger energyCost;

    public BigInteger getEnergyCost() {
        return this.energyCost;
    }

    public void setEnergyCost(BigInteger energyCost) {
        this.energyCost = energyCost;
    }

    private Integer successRate;

    public Integer getSuccessRate() {
        return this.successRate;
    }

    public void setSuccessRate(Integer successRate) {
        this.successRate = successRate;
    }

    private BigInteger version;

    public BigInteger getVersion() {
        return this.version;
    }

    public void setVersion(BigInteger version) {
        this.version = version;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractItemCreationState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setItemCreationId(((ItemCreationEvent.SqlItemCreationEvent) events.get(0)).getItemCreationEventId().getItemCreationId());
            for (Event e : events) {
                mutate(e);
                this.setOffChainVersion((this.getOffChainVersion() == null ? ItemCreationState.VERSION_NULL : this.getOffChainVersion()) + 1);
            }
        }
    }


    public AbstractItemCreationState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getItemCreationId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof ItemCreationState) {
            return Objects.equals(this.getItemCreationId(), ((ItemCreationState)obj).getItemCreationId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else if (e instanceof AbstractItemCreationEvent.ItemCreationCreated) {
            when((AbstractItemCreationEvent.ItemCreationCreated)e);
        } else if (e instanceof AbstractItemCreationEvent.ItemCreationUpdated) {
            when((AbstractItemCreationEvent.ItemCreationUpdated)e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void merge(ItemCreationState s) {
        if (s == this) {
            return;
        }
        this.setResourceCost(s.getResourceCost());
        this.setRequirementsLevel(s.getRequirementsLevel());
        this.setBaseQuantity(s.getBaseQuantity());
        this.setBaseExperience(s.getBaseExperience());
        this.setBaseCreationTime(s.getBaseCreationTime());
        this.setEnergyCost(s.getEnergyCost());
        this.setSuccessRate(s.getSuccessRate());
        this.setVersion(s.getVersion());
        this.setActive(s.getActive());
    }

    public void when(AbstractItemCreationEvent.ItemCreationCreated e) {
        throwOnWrongEvent(e);

        Long resourceCost = e.getResourceCost();
        Long ResourceCost = resourceCost;
        Integer requirementsLevel = e.getRequirementsLevel();
        Integer RequirementsLevel = requirementsLevel;
        Long baseQuantity = e.getBaseQuantity();
        Long BaseQuantity = baseQuantity;
        Long baseExperience = e.getBaseExperience();
        Long BaseExperience = baseExperience;
        BigInteger baseCreationTime = e.getBaseCreationTime();
        BigInteger BaseCreationTime = baseCreationTime;
        BigInteger energyCost = e.getEnergyCost();
        BigInteger EnergyCost = energyCost;
        Integer successRate = e.getSuccessRate();
        Integer SuccessRate = successRate;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        ItemCreationState updatedItemCreationState = (ItemCreationState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.itemcreation.CreateLogic",
                    "mutate",
                    new Class[]{ItemCreationState.class, Long.class, Integer.class, Long.class, Long.class, BigInteger.class, BigInteger.class, Integer.class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, resourceCost, requirementsLevel, baseQuantity, baseExperience, baseCreationTime, energyCost, successRate, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.itemcreation;
//
//public class CreateLogic {
//    public static ItemCreationState mutate(ItemCreationState itemCreationState, Long resourceCost, Integer requirementsLevel, Long baseQuantity, Long baseExperience, BigInteger baseCreationTime, BigInteger energyCost, Integer successRate, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<ItemCreationState, ItemCreationState.MutableItemCreationState> mutationContext) {
//    }
//}

        if (this != updatedItemCreationState) { merge(updatedItemCreationState); } //else do nothing

    }

    public void when(AbstractItemCreationEvent.ItemCreationUpdated e) {
        throwOnWrongEvent(e);

        Long resourceCost = e.getResourceCost();
        Long ResourceCost = resourceCost;
        Integer requirementsLevel = e.getRequirementsLevel();
        Integer RequirementsLevel = requirementsLevel;
        Long baseQuantity = e.getBaseQuantity();
        Long BaseQuantity = baseQuantity;
        Long baseExperience = e.getBaseExperience();
        Long BaseExperience = baseExperience;
        BigInteger baseCreationTime = e.getBaseCreationTime();
        BigInteger BaseCreationTime = baseCreationTime;
        BigInteger energyCost = e.getEnergyCost();
        BigInteger EnergyCost = energyCost;
        Integer successRate = e.getSuccessRate();
        Integer SuccessRate = successRate;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        ItemCreationState updatedItemCreationState = (ItemCreationState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.itemcreation.UpdateLogic",
                    "mutate",
                    new Class[]{ItemCreationState.class, Long.class, Integer.class, Long.class, Long.class, BigInteger.class, BigInteger.class, Integer.class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, resourceCost, requirementsLevel, baseQuantity, baseExperience, baseCreationTime, energyCost, successRate, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.itemcreation;
//
//public class UpdateLogic {
//    public static ItemCreationState mutate(ItemCreationState itemCreationState, Long resourceCost, Integer requirementsLevel, Long baseQuantity, Long baseExperience, BigInteger baseCreationTime, BigInteger energyCost, Integer successRate, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<ItemCreationState, ItemCreationState.MutableItemCreationState> mutationContext) {
//    }
//}

        if (this != updatedItemCreationState) { merge(updatedItemCreationState); } //else do nothing

    }

    public void save() {
    }

    protected void throwOnWrongEvent(ItemCreationEvent event) {
        SkillTypeItemIdPair stateEntityId = this.getItemCreationId(); // Aggregate Id
        SkillTypeItemIdPair eventEntityId = ((ItemCreationEvent.SqlItemCreationEvent)event).getItemCreationEventId().getItemCreationId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getOffChainVersion();

    }


    public static class SimpleItemCreationState extends AbstractItemCreationState {

        public SimpleItemCreationState() {
        }

        public SimpleItemCreationState(List<Event> events) {
            super(events);
        }

        public static SimpleItemCreationState newForReapplying() {
            SimpleItemCreationState s = new SimpleItemCreationState();
            s.initializeForReapplying();
            return s;
        }

    }



}

