// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosinfiniteseas.domain.skillprocess;

import java.util.*;
import org.dddml.aptosinfiniteseas.domain.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.aptosinfiniteseas.specialization.*;
import org.dddml.aptosinfiniteseas.domain.AbstractEvent;

public abstract class AbstractSkillProcessEvent extends AbstractEvent implements SkillProcessEvent.SqlSkillProcessEvent, AptosEvent.MutableAptosEvent, HasEventStatus.MutableHasEventStatus {
    private SkillProcessEventId skillProcessEventId = new SkillProcessEventId();

    public SkillProcessEventId getSkillProcessEventId() {
        return this.skillProcessEventId;
    }

    public void setSkillProcessEventId(SkillProcessEventId eventId) {
        this.skillProcessEventId = eventId;
    }
    
    public String getId() {
        return getSkillProcessEventId().getId();
    }

    public void setId(String id) {
        getSkillProcessEventId().setId(id);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public BigInteger getVersion() {
        return getSkillProcessEventId().getVersion();
    }
    
    public void setVersion(BigInteger version) {
        getSkillProcessEventId().setVersion(version);
    }

    private BigInteger aptosEventVersion;

    public BigInteger getAptosEventVersion() {
        return this.aptosEventVersion;
    }
    
    public void setAptosEventVersion(BigInteger aptosEventVersion) {
        this.aptosEventVersion = aptosEventVersion;
    }

    private BigInteger aptosEventSequenceNumber;

    public BigInteger getAptosEventSequenceNumber() {
        return this.aptosEventSequenceNumber;
    }
    
    public void setAptosEventSequenceNumber(BigInteger aptosEventSequenceNumber) {
        this.aptosEventSequenceNumber = aptosEventSequenceNumber;
    }

    private String aptosEventType;

    public String getAptosEventType() {
        return this.aptosEventType;
    }
    
    public void setAptosEventType(String aptosEventType) {
        this.aptosEventType = aptosEventType;
    }

    private AptosEventGuid aptosEventGuid;

    public AptosEventGuid getAptosEventGuid() {
        return this.aptosEventGuid;
    }
    
    public void setAptosEventGuid(AptosEventGuid aptosEventGuid) {
        this.aptosEventGuid = aptosEventGuid;
    }

    private String eventStatus;

    public String getEventStatus() {
        return this.eventStatus;
    }
    
    public void setEventStatus(String eventStatus) {
        this.eventStatus = eventStatus;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractSkillProcessEvent() {
    }

    protected AbstractSkillProcessEvent(SkillProcessEventId eventId) {
        this.skillProcessEventId = eventId;
    }


    public abstract String getEventClass();

    public static class SkillProcessLobEvent extends AbstractSkillProcessEvent {

        public Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        public void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        @Override
        public String getEventClass() {
            return "SkillProcessLobEvent";
        }

    }

    public static class SkillProcessCreated extends SkillProcessLobEvent implements SkillProcessEvent.SkillProcessCreated {

        @Override
        public String getEventClass() {
            return "SkillProcessCreated";
        }

        public SkillProcessId getSkillProcessId() {
            Object val = getDynamicProperties().get("skillProcessId");
            if (val instanceof SkillProcessId) {
                return (SkillProcessId) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, SkillProcessId.class);
        }

        public void setSkillProcessId(SkillProcessId value) {
            getDynamicProperties().put("skillProcessId", value);
        }

    }

    public static class ProductionProcessStarted extends SkillProcessLobEvent implements SkillProcessEvent.ProductionProcessStarted {

        @Override
        public String getEventClass() {
            return "ProductionProcessStarted";
        }

        public Long getBatchSize() {
            Object val = getDynamicProperties().get("batchSize");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setBatchSize(Long value) {
            getDynamicProperties().put("batchSize", value);
        }

        public String getPlayerId() {
            Object val = getDynamicProperties().get("playerId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setPlayerId(String value) {
            getDynamicProperties().put("playerId", value);
        }

        public Integer getPlayerLevel() {
            Object val = getDynamicProperties().get("playerLevel");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setPlayerLevel(Integer value) {
            getDynamicProperties().put("playerLevel", value);
        }

        public Long getItemId() {
            Object val = getDynamicProperties().get("itemId");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setItemId(Long value) {
            getDynamicProperties().put("itemId", value);
        }

        public BigInteger getEnergyCost() {
            Object val = getDynamicProperties().get("energyCost");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setEnergyCost(BigInteger value) {
            getDynamicProperties().put("energyCost", value);
        }

        public BigInteger getStartedAt() {
            Object val = getDynamicProperties().get("startedAt");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setStartedAt(BigInteger value) {
            getDynamicProperties().put("startedAt", value);
        }

        public BigInteger getCreationTime() {
            Object val = getDynamicProperties().get("creationTime");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setCreationTime(BigInteger value) {
            getDynamicProperties().put("creationTime", value);
        }

        public ItemIdQuantityPairs getProductionMaterials() {
            Object val = getDynamicProperties().get("productionMaterials");
            if (val instanceof ItemIdQuantityPairs) {
                return (ItemIdQuantityPairs) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, ItemIdQuantityPairs.class);
        }

        public void setProductionMaterials(ItemIdQuantityPairs value) {
            getDynamicProperties().put("productionMaterials", value);
        }

    }

    public static class ProductionProcessCompleted extends SkillProcessLobEvent implements SkillProcessEvent.ProductionProcessCompleted {

        @Override
        public String getEventClass() {
            return "ProductionProcessCompleted";
        }

        public String getPlayerId() {
            Object val = getDynamicProperties().get("playerId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setPlayerId(String value) {
            getDynamicProperties().put("playerId", value);
        }

        public Integer getPlayerLevel() {
            Object val = getDynamicProperties().get("playerLevel");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setPlayerLevel(Integer value) {
            getDynamicProperties().put("playerLevel", value);
        }

        public Long getPlayerExperience() {
            Object val = getDynamicProperties().get("playerExperience");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setPlayerExperience(Long value) {
            getDynamicProperties().put("playerExperience", value);
        }

        public Long getItemId() {
            Object val = getDynamicProperties().get("itemId");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setItemId(Long value) {
            getDynamicProperties().put("itemId", value);
        }

        public BigInteger getStartedAt() {
            Object val = getDynamicProperties().get("startedAt");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setStartedAt(BigInteger value) {
            getDynamicProperties().put("startedAt", value);
        }

        public BigInteger getCreationTime() {
            Object val = getDynamicProperties().get("creationTime");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setCreationTime(BigInteger value) {
            getDynamicProperties().put("creationTime", value);
        }

        public BigInteger getEndedAt() {
            Object val = getDynamicProperties().get("endedAt");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setEndedAt(BigInteger value) {
            getDynamicProperties().put("endedAt", value);
        }

        public Boolean getSuccessful() {
            Object val = getDynamicProperties().get("successful");
            if (val instanceof Boolean) {
                return (Boolean) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Boolean.class);
        }

        public void setSuccessful(Boolean value) {
            getDynamicProperties().put("successful", value);
        }

        public Long getQuantity() {
            Object val = getDynamicProperties().get("quantity");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setQuantity(Long value) {
            getDynamicProperties().put("quantity", value);
        }

        public Long getExperience() {
            Object val = getDynamicProperties().get("experience");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setExperience(Long value) {
            getDynamicProperties().put("experience", value);
        }

        public Integer getNewLevel() {
            Object val = getDynamicProperties().get("newLevel");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setNewLevel(Integer value) {
            getDynamicProperties().put("newLevel", value);
        }

    }

    public static class ShipProductionProcessStarted extends SkillProcessLobEvent implements SkillProcessEvent.ShipProductionProcessStarted {

        @Override
        public String getEventClass() {
            return "ShipProductionProcessStarted";
        }

        public String getPlayerId() {
            Object val = getDynamicProperties().get("playerId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setPlayerId(String value) {
            getDynamicProperties().put("playerId", value);
        }

        public Integer getPlayerLevel() {
            Object val = getDynamicProperties().get("playerLevel");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setPlayerLevel(Integer value) {
            getDynamicProperties().put("playerLevel", value);
        }

        public Long getItemId() {
            Object val = getDynamicProperties().get("itemId");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setItemId(Long value) {
            getDynamicProperties().put("itemId", value);
        }

        public BigInteger getEnergyCost() {
            Object val = getDynamicProperties().get("energyCost");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setEnergyCost(BigInteger value) {
            getDynamicProperties().put("energyCost", value);
        }

        public BigInteger getStartedAt() {
            Object val = getDynamicProperties().get("startedAt");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setStartedAt(BigInteger value) {
            getDynamicProperties().put("startedAt", value);
        }

        public BigInteger getCreationTime() {
            Object val = getDynamicProperties().get("creationTime");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setCreationTime(BigInteger value) {
            getDynamicProperties().put("creationTime", value);
        }

        public ItemIdQuantityPairs getProductionMaterials() {
            Object val = getDynamicProperties().get("productionMaterials");
            if (val instanceof ItemIdQuantityPairs) {
                return (ItemIdQuantityPairs) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, ItemIdQuantityPairs.class);
        }

        public void setProductionMaterials(ItemIdQuantityPairs value) {
            getDynamicProperties().put("productionMaterials", value);
        }

    }

    public static class ShipProductionProcessCompleted extends SkillProcessLobEvent implements SkillProcessEvent.ShipProductionProcessCompleted {

        @Override
        public String getEventClass() {
            return "ShipProductionProcessCompleted";
        }

        public String getUnassignedShipsObjectAddress() {
            Object val = getDynamicProperties().get("unassignedShipsObjectAddress");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setUnassignedShipsObjectAddress(String value) {
            getDynamicProperties().put("unassignedShipsObjectAddress", value);
        }

        public String getPlayerId() {
            Object val = getDynamicProperties().get("playerId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setPlayerId(String value) {
            getDynamicProperties().put("playerId", value);
        }

        public Integer getPlayerLevel() {
            Object val = getDynamicProperties().get("playerLevel");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setPlayerLevel(Integer value) {
            getDynamicProperties().put("playerLevel", value);
        }

        public Long getPlayerExperience() {
            Object val = getDynamicProperties().get("playerExperience");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setPlayerExperience(Long value) {
            getDynamicProperties().put("playerExperience", value);
        }

        public Long getItemId() {
            Object val = getDynamicProperties().get("itemId");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setItemId(Long value) {
            getDynamicProperties().put("itemId", value);
        }

        public BigInteger getStartedAt() {
            Object val = getDynamicProperties().get("startedAt");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setStartedAt(BigInteger value) {
            getDynamicProperties().put("startedAt", value);
        }

        public BigInteger getCreationTime() {
            Object val = getDynamicProperties().get("creationTime");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setCreationTime(BigInteger value) {
            getDynamicProperties().put("creationTime", value);
        }

        public BigInteger getEndedAt() {
            Object val = getDynamicProperties().get("endedAt");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setEndedAt(BigInteger value) {
            getDynamicProperties().put("endedAt", value);
        }

        public Boolean getSuccessful() {
            Object val = getDynamicProperties().get("successful");
            if (val instanceof Boolean) {
                return (Boolean) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Boolean.class);
        }

        public void setSuccessful(Boolean value) {
            getDynamicProperties().put("successful", value);
        }

        public Long getQuantity() {
            Object val = getDynamicProperties().get("quantity");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setQuantity(Long value) {
            getDynamicProperties().put("quantity", value);
        }

        public Long getExperience() {
            Object val = getDynamicProperties().get("experience");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setExperience(Long value) {
            getDynamicProperties().put("experience", value);
        }

        public Integer getNewLevel() {
            Object val = getDynamicProperties().get("newLevel");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setNewLevel(Integer value) {
            getDynamicProperties().put("newLevel", value);
        }

    }

    public static class CreationProcessStarted extends SkillProcessLobEvent implements SkillProcessEvent.CreationProcessStarted {

        @Override
        public String getEventClass() {
            return "CreationProcessStarted";
        }

        public Long getBatchSize() {
            Object val = getDynamicProperties().get("batchSize");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setBatchSize(Long value) {
            getDynamicProperties().put("batchSize", value);
        }

        public String getPlayerId() {
            Object val = getDynamicProperties().get("playerId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setPlayerId(String value) {
            getDynamicProperties().put("playerId", value);
        }

        public Integer getPlayerLevel() {
            Object val = getDynamicProperties().get("playerLevel");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setPlayerLevel(Integer value) {
            getDynamicProperties().put("playerLevel", value);
        }

        public Long getItemId() {
            Object val = getDynamicProperties().get("itemId");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setItemId(Long value) {
            getDynamicProperties().put("itemId", value);
        }

        public BigInteger getEnergyCost() {
            Object val = getDynamicProperties().get("energyCost");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setEnergyCost(BigInteger value) {
            getDynamicProperties().put("energyCost", value);
        }

        public Long getResourceCost() {
            Object val = getDynamicProperties().get("resourceCost");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setResourceCost(Long value) {
            getDynamicProperties().put("resourceCost", value);
        }

        public BigInteger getStartedAt() {
            Object val = getDynamicProperties().get("startedAt");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setStartedAt(BigInteger value) {
            getDynamicProperties().put("startedAt", value);
        }

        public BigInteger getCreationTime() {
            Object val = getDynamicProperties().get("creationTime");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setCreationTime(BigInteger value) {
            getDynamicProperties().put("creationTime", value);
        }

    }

    public static class CreationProcessCompleted extends SkillProcessLobEvent implements SkillProcessEvent.CreationProcessCompleted {

        @Override
        public String getEventClass() {
            return "CreationProcessCompleted";
        }

        public String getPlayerId() {
            Object val = getDynamicProperties().get("playerId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setPlayerId(String value) {
            getDynamicProperties().put("playerId", value);
        }

        public Integer getPlayerLevel() {
            Object val = getDynamicProperties().get("playerLevel");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setPlayerLevel(Integer value) {
            getDynamicProperties().put("playerLevel", value);
        }

        public Long getPlayerExperience() {
            Object val = getDynamicProperties().get("playerExperience");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setPlayerExperience(Long value) {
            getDynamicProperties().put("playerExperience", value);
        }

        public Long getItemId() {
            Object val = getDynamicProperties().get("itemId");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setItemId(Long value) {
            getDynamicProperties().put("itemId", value);
        }

        public BigInteger getStartedAt() {
            Object val = getDynamicProperties().get("startedAt");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setStartedAt(BigInteger value) {
            getDynamicProperties().put("startedAt", value);
        }

        public BigInteger getCreationTime() {
            Object val = getDynamicProperties().get("creationTime");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setCreationTime(BigInteger value) {
            getDynamicProperties().put("creationTime", value);
        }

        public BigInteger getEndedAt() {
            Object val = getDynamicProperties().get("endedAt");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setEndedAt(BigInteger value) {
            getDynamicProperties().put("endedAt", value);
        }

        public Boolean getSuccessful() {
            Object val = getDynamicProperties().get("successful");
            if (val instanceof Boolean) {
                return (Boolean) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Boolean.class);
        }

        public void setSuccessful(Boolean value) {
            getDynamicProperties().put("successful", value);
        }

        public Long getQuantity() {
            Object val = getDynamicProperties().get("quantity");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setQuantity(Long value) {
            getDynamicProperties().put("quantity", value);
        }

        public Long getExperience() {
            Object val = getDynamicProperties().get("experience");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setExperience(Long value) {
            getDynamicProperties().put("experience", value);
        }

        public Integer getNewLevel() {
            Object val = getDynamicProperties().get("newLevel");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setNewLevel(Integer value) {
            getDynamicProperties().put("newLevel", value);
        }

    }


}

