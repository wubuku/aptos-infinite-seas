// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosinfiniteseas.domain.itemproduction;

import java.util.*;
import org.dddml.aptosinfiniteseas.domain.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.aptosinfiniteseas.specialization.*;
import org.dddml.aptosinfiniteseas.domain.AbstractEvent;

public abstract class AbstractItemProductionEvent extends AbstractEvent implements ItemProductionEvent.SqlItemProductionEvent, AptosEvent.MutableAptosEvent, HasEventStatus.MutableHasEventStatus {
    private ItemProductionEventId itemProductionEventId = new ItemProductionEventId();

    public ItemProductionEventId getItemProductionEventId() {
        return this.itemProductionEventId;
    }

    public void setItemProductionEventId(ItemProductionEventId eventId) {
        this.itemProductionEventId = eventId;
    }
    
    public SkillTypeItemIdPair getItemProductionId() {
        return getItemProductionEventId().getItemProductionId();
    }

    public void setItemProductionId(SkillTypeItemIdPair itemProductionId) {
        getItemProductionEventId().setItemProductionId(itemProductionId);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public BigInteger getVersion() {
        return getItemProductionEventId().getVersion();
    }
    
    public void setVersion(BigInteger version) {
        getItemProductionEventId().setVersion(version);
    }

    private BigInteger aptosEventVersion;

    public BigInteger getAptosEventVersion() {
        return this.aptosEventVersion;
    }
    
    public void setAptosEventVersion(BigInteger aptosEventVersion) {
        this.aptosEventVersion = aptosEventVersion;
    }

    private BigInteger aptosEventSequenceNumber;

    public BigInteger getAptosEventSequenceNumber() {
        return this.aptosEventSequenceNumber;
    }
    
    public void setAptosEventSequenceNumber(BigInteger aptosEventSequenceNumber) {
        this.aptosEventSequenceNumber = aptosEventSequenceNumber;
    }

    private String aptosEventType;

    public String getAptosEventType() {
        return this.aptosEventType;
    }
    
    public void setAptosEventType(String aptosEventType) {
        this.aptosEventType = aptosEventType;
    }

    private AptosEventGuid aptosEventGuid;

    public AptosEventGuid getAptosEventGuid() {
        return this.aptosEventGuid;
    }
    
    public void setAptosEventGuid(AptosEventGuid aptosEventGuid) {
        this.aptosEventGuid = aptosEventGuid;
    }

    private String eventStatus;

    public String getEventStatus() {
        return this.eventStatus;
    }
    
    public void setEventStatus(String eventStatus) {
        this.eventStatus = eventStatus;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractItemProductionEvent() {
    }

    protected AbstractItemProductionEvent(ItemProductionEventId eventId) {
        this.itemProductionEventId = eventId;
    }


    public abstract String getEventClass();

    public static class ItemProductionLobEvent extends AbstractItemProductionEvent {

        public Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        public void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        @Override
        public String getEventClass() {
            return "ItemProductionLobEvent";
        }

    }

    public static class ItemProductionCreated extends ItemProductionLobEvent implements ItemProductionEvent.ItemProductionCreated {

        @Override
        public String getEventClass() {
            return "ItemProductionCreated";
        }

        public ItemIdQuantityPairs getProductionMaterials() {
            Object val = getDynamicProperties().get("productionMaterials");
            if (val instanceof ItemIdQuantityPairs) {
                return (ItemIdQuantityPairs) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, ItemIdQuantityPairs.class);
        }

        public void setProductionMaterials(ItemIdQuantityPairs value) {
            getDynamicProperties().put("productionMaterials", value);
        }

        public Integer getRequirementsLevel() {
            Object val = getDynamicProperties().get("requirementsLevel");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setRequirementsLevel(Integer value) {
            getDynamicProperties().put("requirementsLevel", value);
        }

        public Long getBaseQuantity() {
            Object val = getDynamicProperties().get("baseQuantity");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setBaseQuantity(Long value) {
            getDynamicProperties().put("baseQuantity", value);
        }

        public Long getBaseExperience() {
            Object val = getDynamicProperties().get("baseExperience");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setBaseExperience(Long value) {
            getDynamicProperties().put("baseExperience", value);
        }

        public BigInteger getBaseCreationTime() {
            Object val = getDynamicProperties().get("baseCreationTime");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setBaseCreationTime(BigInteger value) {
            getDynamicProperties().put("baseCreationTime", value);
        }

        public BigInteger getEnergyCost() {
            Object val = getDynamicProperties().get("energyCost");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setEnergyCost(BigInteger value) {
            getDynamicProperties().put("energyCost", value);
        }

        public Integer getSuccessRate() {
            Object val = getDynamicProperties().get("successRate");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setSuccessRate(Integer value) {
            getDynamicProperties().put("successRate", value);
        }

    }

    public static class ItemProductionUpdated extends ItemProductionLobEvent implements ItemProductionEvent.ItemProductionUpdated {

        @Override
        public String getEventClass() {
            return "ItemProductionUpdated";
        }

        public ItemIdQuantityPairs getProductionMaterials() {
            Object val = getDynamicProperties().get("productionMaterials");
            if (val instanceof ItemIdQuantityPairs) {
                return (ItemIdQuantityPairs) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, ItemIdQuantityPairs.class);
        }

        public void setProductionMaterials(ItemIdQuantityPairs value) {
            getDynamicProperties().put("productionMaterials", value);
        }

        public Integer getRequirementsLevel() {
            Object val = getDynamicProperties().get("requirementsLevel");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setRequirementsLevel(Integer value) {
            getDynamicProperties().put("requirementsLevel", value);
        }

        public Long getBaseQuantity() {
            Object val = getDynamicProperties().get("baseQuantity");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setBaseQuantity(Long value) {
            getDynamicProperties().put("baseQuantity", value);
        }

        public Long getBaseExperience() {
            Object val = getDynamicProperties().get("baseExperience");
            if (val instanceof Long) {
                return (Long) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Long.class);
        }

        public void setBaseExperience(Long value) {
            getDynamicProperties().put("baseExperience", value);
        }

        public BigInteger getBaseCreationTime() {
            Object val = getDynamicProperties().get("baseCreationTime");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setBaseCreationTime(BigInteger value) {
            getDynamicProperties().put("baseCreationTime", value);
        }

        public BigInteger getEnergyCost() {
            Object val = getDynamicProperties().get("energyCost");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setEnergyCost(BigInteger value) {
            getDynamicProperties().put("energyCost", value);
        }

        public Integer getSuccessRate() {
            Object val = getDynamicProperties().get("successRate");
            if (val instanceof Integer) {
                return (Integer) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Integer.class);
        }

        public void setSuccessRate(Integer value) {
            getDynamicProperties().put("successRate", value);
        }

    }


}

