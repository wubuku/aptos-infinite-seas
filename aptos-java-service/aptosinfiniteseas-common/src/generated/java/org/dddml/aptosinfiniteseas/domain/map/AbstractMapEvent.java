// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosinfiniteseas.domain.map;

import java.util.*;
import java.util.Date;
import java.math.BigInteger;
import org.dddml.aptosinfiniteseas.domain.*;
import org.dddml.aptosinfiniteseas.specialization.*;
import org.dddml.aptosinfiniteseas.domain.AbstractEvent;

public abstract class AbstractMapEvent extends AbstractEvent implements MapEvent.SqlMapEvent, AptosEvent.MutableAptosEvent, HasEventStatus.MutableHasEventStatus {
    private MapEventId mapEventId = new MapEventId();

    public MapEventId getMapEventId() {
        return this.mapEventId;
    }

    public void setMapEventId(MapEventId eventId) {
        this.mapEventId = eventId;
    }
    
    public String getAccountAddress() {
        return getMapEventId().getAccountAddress();
    }

    public void setAccountAddress(String accountAddress) {
        getMapEventId().setAccountAddress(accountAddress);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public BigInteger getVersion() {
        return getMapEventId().getVersion();
    }
    
    public void setVersion(BigInteger version) {
        getMapEventId().setVersion(version);
    }

    private BigInteger aptosEventVersion;

    public BigInteger getAptosEventVersion() {
        return this.aptosEventVersion;
    }
    
    public void setAptosEventVersion(BigInteger aptosEventVersion) {
        this.aptosEventVersion = aptosEventVersion;
    }

    private BigInteger aptosEventSequenceNumber;

    public BigInteger getAptosEventSequenceNumber() {
        return this.aptosEventSequenceNumber;
    }
    
    public void setAptosEventSequenceNumber(BigInteger aptosEventSequenceNumber) {
        this.aptosEventSequenceNumber = aptosEventSequenceNumber;
    }

    private String aptosEventType;

    public String getAptosEventType() {
        return this.aptosEventType;
    }
    
    public void setAptosEventType(String aptosEventType) {
        this.aptosEventType = aptosEventType;
    }

    private AptosEventGuid aptosEventGuid;

    public AptosEventGuid getAptosEventGuid() {
        return this.aptosEventGuid;
    }
    
    public void setAptosEventGuid(AptosEventGuid aptosEventGuid) {
        this.aptosEventGuid = aptosEventGuid;
    }

    private String eventStatus;

    public String getEventStatus() {
        return this.eventStatus;
    }
    
    public void setEventStatus(String eventStatus) {
        this.eventStatus = eventStatus;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractMapEvent() {
    }

    protected AbstractMapEvent(MapEventId eventId) {
        this.mapEventId = eventId;
    }

    protected MapLocationEventDao getMapLocationEventDao() {
        return (MapLocationEventDao)ApplicationContext.current.get("mapLocationEventDao");
    }

    protected MapLocationEventId newMapLocationEventId(Coordinates coordinates)
    {
        MapLocationEventId eventId = new MapLocationEventId(this.getMapEventId().getAccountAddress(), 
            coordinates, 
            this.getMapEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(MapLocationEvent.SqlMapLocationEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(MapEvent.SqlMapEvent oe, MapLocationEvent.SqlMapLocationEvent e)
    {
        if (!oe.getMapEventId().getAccountAddress().equals(e.getMapLocationEventId().getMapAccountAddress()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id AccountAddress %1$s but inner id MapAccountAddress %2$s", 
                oe.getMapEventId().getAccountAddress(), e.getMapLocationEventId().getMapAccountAddress());
        }
    }


    public abstract String getEventClass();

    public static class MapLobEvent extends AbstractMapEvent {

        public Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        public void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        @Override
        public String getEventClass() {
            return "MapLobEvent";
        }

    }

    public static class MapInitialized extends MapLobEvent implements MapEvent.MapInitialized {

        @Override
        public String getEventClass() {
            return "MapInitialized";
        }

    }

    public static class IslandAdded extends MapLobEvent implements MapEvent.IslandAdded {

        @Override
        public String getEventClass() {
            return "IslandAdded";
        }

        public Coordinates getCoordinates() {
            Object val = getDynamicProperties().get("coordinates");
            if (val instanceof Coordinates) {
                return (Coordinates) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Coordinates.class);
        }

        public void setCoordinates(Coordinates value) {
            getDynamicProperties().put("coordinates", value);
        }

        public ItemIdQuantityPairs getResources() {
            Object val = getDynamicProperties().get("resources");
            if (val instanceof ItemIdQuantityPairs) {
                return (ItemIdQuantityPairs) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, ItemIdQuantityPairs.class);
        }

        public void setResources(ItemIdQuantityPairs value) {
            getDynamicProperties().put("resources", value);
        }

    }

    public static class MapIslandClaimed extends MapLobEvent implements MapEvent.MapIslandClaimed {

        @Override
        public String getEventClass() {
            return "MapIslandClaimed";
        }

        public Coordinates getCoordinates() {
            Object val = getDynamicProperties().get("coordinates");
            if (val instanceof Coordinates) {
                return (Coordinates) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Coordinates.class);
        }

        public void setCoordinates(Coordinates value) {
            getDynamicProperties().put("coordinates", value);
        }

        public String getClaimedBy() {
            Object val = getDynamicProperties().get("claimedBy");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setClaimedBy(String value) {
            getDynamicProperties().put("claimedBy", value);
        }

        public BigInteger getClaimedAt() {
            Object val = getDynamicProperties().get("claimedAt");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setClaimedAt(BigInteger value) {
            getDynamicProperties().put("claimedAt", value);
        }

    }

    public static class IslandResourcesGathered extends MapLobEvent implements MapEvent.IslandResourcesGathered {

        @Override
        public String getEventClass() {
            return "IslandResourcesGathered";
        }

        public String getPlayerId() {
            Object val = getDynamicProperties().get("playerId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setPlayerId(String value) {
            getDynamicProperties().put("playerId", value);
        }

        public Coordinates getCoordinates() {
            Object val = getDynamicProperties().get("coordinates");
            if (val instanceof Coordinates) {
                return (Coordinates) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, Coordinates.class);
        }

        public void setCoordinates(Coordinates value) {
            getDynamicProperties().put("coordinates", value);
        }

        public ItemIdQuantityPair[] getResources() {
            Object val = getDynamicProperties().get("resources");
            if (val instanceof ItemIdQuantityPair[]) {
                return (ItemIdQuantityPair[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, ItemIdQuantityPair[].class);
        }

        public void setResources(ItemIdQuantityPair[] value) {
            getDynamicProperties().put("resources", value);
        }

        public BigInteger getGatheredAt() {
            Object val = getDynamicProperties().get("gatheredAt");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setGatheredAt(BigInteger value) {
            getDynamicProperties().put("gatheredAt", value);
        }

    }


}

