// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosinfiniteseas.domain.player;

import java.util.*;
import org.dddml.aptosinfiniteseas.domain.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.aptosinfiniteseas.specialization.*;

public abstract class AbstractPlayerAggregate extends AbstractAggregate implements PlayerAggregate {
    private PlayerState.MutablePlayerState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractPlayerAggregate(PlayerState state) {
        this.state = (PlayerState.MutablePlayerState)state;
    }

    public PlayerState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        PlayerCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimplePlayerAggregate extends AbstractPlayerAggregate {
        public SimplePlayerAggregate(PlayerState state) {
            super(state);
        }

        @Override
        public void create(String name, Long offChainVersion, String commandId, String requesterId, PlayerCommands.Create c) {
            java.util.function.Supplier<PlayerEvent.PlayerCreated> eventFactory = () -> newPlayerCreated(name, offChainVersion, commandId, requesterId);
            PlayerEvent.PlayerCreated e;
            try {
                e = verifyCreate(eventFactory, name, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void claimIsland(Coordinates coordinates, Long offChainVersion, String commandId, String requesterId, PlayerCommands.ClaimIsland c) {
            java.util.function.Supplier<PlayerEvent.IslandClaimed> eventFactory = () -> newIslandClaimed(coordinates, offChainVersion, commandId, requesterId);
            PlayerEvent.IslandClaimed e;
            try {
                e = verifyClaimIsland(eventFactory, coordinates, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void airdrop(Long itemId, Long quantity, Long offChainVersion, String commandId, String requesterId, PlayerCommands.Airdrop c) {
            java.util.function.Supplier<PlayerEvent.PlayerAirdropped> eventFactory = () -> newPlayerAirdropped(itemId, quantity, offChainVersion, commandId, requesterId);
            PlayerEvent.PlayerAirdropped e;
            try {
                e = verifyAirdrop(eventFactory, itemId, quantity, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void gatherIslandResources(Long offChainVersion, String commandId, String requesterId, PlayerCommands.GatherIslandResources c) {
            java.util.function.Supplier<PlayerEvent.PlayerIslandResourcesGathered> eventFactory = () -> newPlayerIslandResourcesGathered(offChainVersion, commandId, requesterId);
            PlayerEvent.PlayerIslandResourcesGathered e;
            try {
                e = verifyGatherIslandResources(eventFactory, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected PlayerEvent.PlayerCreated verifyCreate(java.util.function.Supplier<PlayerEvent.PlayerCreated> eventFactory, String name, PlayerCommands.Create c) {
            String Name = name;

            PlayerEvent.PlayerCreated e = (PlayerEvent.PlayerCreated) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.player.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, PlayerState.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), name, VerificationContext.forCommand(c)}
            );

//package org.dddml.aptosinfiniteseas.domain.player;
//
//public class CreateLogic {
//    public static PlayerEvent.PlayerCreated verify(java.util.function.Supplier<PlayerEvent.PlayerCreated> eventFactory, PlayerState playerState, String name, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected PlayerEvent.IslandClaimed verifyClaimIsland(java.util.function.Supplier<PlayerEvent.IslandClaimed> eventFactory, Coordinates coordinates, PlayerCommands.ClaimIsland c) {
            Coordinates Coordinates = coordinates;

            PlayerEvent.IslandClaimed e = (PlayerEvent.IslandClaimed) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.player.ClaimIslandLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, PlayerState.class, Coordinates.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), coordinates, VerificationContext.forCommand(c)}
            );

//package org.dddml.aptosinfiniteseas.domain.player;
//
//public class ClaimIslandLogic {
//    public static PlayerEvent.IslandClaimed verify(java.util.function.Supplier<PlayerEvent.IslandClaimed> eventFactory, PlayerState playerState, Coordinates coordinates, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected PlayerEvent.PlayerAirdropped verifyAirdrop(java.util.function.Supplier<PlayerEvent.PlayerAirdropped> eventFactory, Long itemId, Long quantity, PlayerCommands.Airdrop c) {
            Long ItemId = itemId;
            Long Quantity = quantity;

            PlayerEvent.PlayerAirdropped e = (PlayerEvent.PlayerAirdropped) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.player.AirdropLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, PlayerState.class, Long.class, Long.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), itemId, quantity, VerificationContext.forCommand(c)}
            );

//package org.dddml.aptosinfiniteseas.domain.player;
//
//public class AirdropLogic {
//    public static PlayerEvent.PlayerAirdropped verify(java.util.function.Supplier<PlayerEvent.PlayerAirdropped> eventFactory, PlayerState playerState, Long itemId, Long quantity, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected PlayerEvent.PlayerIslandResourcesGathered verifyGatherIslandResources(java.util.function.Supplier<PlayerEvent.PlayerIslandResourcesGathered> eventFactory, PlayerCommands.GatherIslandResources c) {

            PlayerEvent.PlayerIslandResourcesGathered e = (PlayerEvent.PlayerIslandResourcesGathered) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.player.GatherIslandResourcesLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, PlayerState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.dddml.aptosinfiniteseas.domain.player;
//
//public class GatherIslandResourcesLogic {
//    public static PlayerEvent.PlayerIslandResourcesGathered verify(java.util.function.Supplier<PlayerEvent.PlayerIslandResourcesGathered> eventFactory, PlayerState playerState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractPlayerEvent.PlayerCreated newPlayerCreated(String name, Long offChainVersion, String commandId, String requesterId) {
            PlayerEventId eventId = new PlayerEventId(getState().getId(), null);
            AbstractPlayerEvent.PlayerCreated e = new AbstractPlayerEvent.PlayerCreated();

            e.getDynamicProperties().put("name", name);
            e.setOwner(null);
            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setPlayerEventId(eventId);
            return e;
        }

        protected AbstractPlayerEvent.IslandClaimed newIslandClaimed(Coordinates coordinates, Long offChainVersion, String commandId, String requesterId) {
            PlayerEventId eventId = new PlayerEventId(getState().getId(), null);
            AbstractPlayerEvent.IslandClaimed e = new AbstractPlayerEvent.IslandClaimed();

            e.getDynamicProperties().put("coordinates", coordinates);
            e.setClaimedAt(null);
            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setPlayerEventId(eventId);
            return e;
        }

        protected AbstractPlayerEvent.PlayerAirdropped newPlayerAirdropped(Long itemId, Long quantity, Long offChainVersion, String commandId, String requesterId) {
            PlayerEventId eventId = new PlayerEventId(getState().getId(), null);
            AbstractPlayerEvent.PlayerAirdropped e = new AbstractPlayerEvent.PlayerAirdropped();

            e.getDynamicProperties().put("itemId", itemId);
            e.getDynamicProperties().put("quantity", quantity);
            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setPlayerEventId(eventId);
            return e;
        }

        protected AbstractPlayerEvent.PlayerIslandResourcesGathered newPlayerIslandResourcesGathered(Long offChainVersion, String commandId, String requesterId) {
            PlayerEventId eventId = new PlayerEventId(getState().getId(), null);
            AbstractPlayerEvent.PlayerIslandResourcesGathered e = new AbstractPlayerEvent.PlayerIslandResourcesGathered();

            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setPlayerEventId(eventId);
            return e;
        }

    }

}

