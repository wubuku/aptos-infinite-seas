// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosinfiniteseas.domain.shipbattle;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.aptosinfiniteseas.domain.*;
import org.dddml.aptosinfiniteseas.specialization.*;

public abstract class AbstractShipBattleAggregate extends AbstractAggregate implements ShipBattleAggregate {
    private ShipBattleState.MutableShipBattleState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractShipBattleAggregate(ShipBattleState state) {
        this.state = (ShipBattleState.MutableShipBattleState)state;
    }

    public ShipBattleState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        ShipBattleCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleShipBattleAggregate extends AbstractShipBattleAggregate {
        public SimpleShipBattleAggregate(ShipBattleState state) {
            super(state);
        }

        @Override
        public void initiateBattle(String player, String initiator, String responder, Coordinates initiatorCoordinates, Coordinates responderCoordinates, Long offChainVersion, String commandId, String requesterId, ShipBattleCommands.InitiateBattle c) {
            java.util.function.Supplier<ShipBattleEvent.ShipBattleInitiated> eventFactory = () -> newShipBattleInitiated(player, initiator, responder, initiatorCoordinates, responderCoordinates, offChainVersion, commandId, requesterId);
            ShipBattleEvent.ShipBattleInitiated e;
            try {
                e = verifyInitiateBattle(eventFactory, player, initiator, responder, initiatorCoordinates, responderCoordinates, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void makeMove(String player, String initiator, String responder, Integer attackerCommand, Long offChainVersion, String commandId, String requesterId, ShipBattleCommands.MakeMove c) {
            java.util.function.Supplier<ShipBattleEvent.ShipBattleMoveMade> eventFactory = () -> newShipBattleMoveMade(player, initiator, responder, attackerCommand, offChainVersion, commandId, requesterId);
            ShipBattleEvent.ShipBattleMoveMade e;
            try {
                e = verifyMakeMove(eventFactory, player, initiator, responder, attackerCommand, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void takeLoot(String player, String loserPlayer, String initiator, String responder, Integer choice, Long offChainVersion, String commandId, String requesterId, ShipBattleCommands.TakeLoot c) {
            java.util.function.Supplier<ShipBattleEvent.ShipBattleLootTaken> eventFactory = () -> newShipBattleLootTaken(player, loserPlayer, initiator, responder, choice, offChainVersion, commandId, requesterId);
            ShipBattleEvent.ShipBattleLootTaken e;
            try {
                e = verifyTakeLoot(eventFactory, player, loserPlayer, initiator, responder, choice, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected ShipBattleEvent.ShipBattleInitiated verifyInitiateBattle(java.util.function.Supplier<ShipBattleEvent.ShipBattleInitiated> eventFactory, String player, String initiator, String responder, Coordinates initiatorCoordinates, Coordinates responderCoordinates, ShipBattleCommands.InitiateBattle c) {
            String Player = player;
            String Initiator = initiator;
            String Responder = responder;
            Coordinates InitiatorCoordinates = initiatorCoordinates;
            Coordinates ResponderCoordinates = responderCoordinates;

            ShipBattleEvent.ShipBattleInitiated e = (ShipBattleEvent.ShipBattleInitiated) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.shipbattle.InitiateBattleLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ShipBattleState.class, String.class, String.class, String.class, Coordinates.class, Coordinates.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), player, initiator, responder, initiatorCoordinates, responderCoordinates, VerificationContext.forCommand(c)}
            );

//package org.dddml.aptosinfiniteseas.domain.shipbattle;
//
//public class InitiateBattleLogic {
//    public static ShipBattleEvent.ShipBattleInitiated verify(java.util.function.Supplier<ShipBattleEvent.ShipBattleInitiated> eventFactory, ShipBattleState shipBattleState, String player, String initiator, String responder, Coordinates initiatorCoordinates, Coordinates responderCoordinates, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected ShipBattleEvent.ShipBattleMoveMade verifyMakeMove(java.util.function.Supplier<ShipBattleEvent.ShipBattleMoveMade> eventFactory, String player, String initiator, String responder, Integer attackerCommand, ShipBattleCommands.MakeMove c) {
            String Player = player;
            String Initiator = initiator;
            String Responder = responder;
            Integer AttackerCommand = attackerCommand;

            ShipBattleEvent.ShipBattleMoveMade e = (ShipBattleEvent.ShipBattleMoveMade) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.shipbattle.MakeMoveLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ShipBattleState.class, String.class, String.class, String.class, Integer.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), player, initiator, responder, attackerCommand, VerificationContext.forCommand(c)}
            );

//package org.dddml.aptosinfiniteseas.domain.shipbattle;
//
//public class MakeMoveLogic {
//    public static ShipBattleEvent.ShipBattleMoveMade verify(java.util.function.Supplier<ShipBattleEvent.ShipBattleMoveMade> eventFactory, ShipBattleState shipBattleState, String player, String initiator, String responder, Integer attackerCommand, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected ShipBattleEvent.ShipBattleLootTaken verifyTakeLoot(java.util.function.Supplier<ShipBattleEvent.ShipBattleLootTaken> eventFactory, String player, String loserPlayer, String initiator, String responder, Integer choice, ShipBattleCommands.TakeLoot c) {
            String Player = player;
            String LoserPlayer = loserPlayer;
            String Initiator = initiator;
            String Responder = responder;
            Integer Choice = choice;

            ShipBattleEvent.ShipBattleLootTaken e = (ShipBattleEvent.ShipBattleLootTaken) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.shipbattle.TakeLootLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ShipBattleState.class, String.class, String.class, String.class, String.class, Integer.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), player, loserPlayer, initiator, responder, choice, VerificationContext.forCommand(c)}
            );

//package org.dddml.aptosinfiniteseas.domain.shipbattle;
//
//public class TakeLootLogic {
//    public static ShipBattleEvent.ShipBattleLootTaken verify(java.util.function.Supplier<ShipBattleEvent.ShipBattleLootTaken> eventFactory, ShipBattleState shipBattleState, String player, String loserPlayer, String initiator, String responder, Integer choice, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractShipBattleEvent.ShipBattleInitiated newShipBattleInitiated(String player, String initiator, String responder, Coordinates initiatorCoordinates, Coordinates responderCoordinates, Long offChainVersion, String commandId, String requesterId) {
            ShipBattleEventId eventId = new ShipBattleEventId(getState().getId(), null);
            AbstractShipBattleEvent.ShipBattleInitiated e = new AbstractShipBattleEvent.ShipBattleInitiated();

            e.setPlayerId(null);
            e.setInitiatorId(null);
            e.setResponderId(null);
            e.getDynamicProperties().put("initiatorCoordinates", initiatorCoordinates);
            e.getDynamicProperties().put("responderCoordinates", responderCoordinates);
            e.setStartedAt(null);
            e.setFirstRoundMover(null);
            e.setFirstRoundAttackerShip(null);
            e.setFirstRoundDefenderShip(null);
            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setShipBattleEventId(eventId);
            return e;
        }

        protected AbstractShipBattleEvent.ShipBattleMoveMade newShipBattleMoveMade(String player, String initiator, String responder, Integer attackerCommand, Long offChainVersion, String commandId, String requesterId) {
            ShipBattleEventId eventId = new ShipBattleEventId(getState().getId(), null);
            AbstractShipBattleEvent.ShipBattleMoveMade e = new AbstractShipBattleEvent.ShipBattleMoveMade();

            e.setPlayerId(null);
            e.setInitiatorId(null);
            e.setResponderId(null);
            e.getDynamicProperties().put("attackerCommand", attackerCommand);
            e.setDefenderCommand(null);
            e.setRoundNumber(null);
            e.setDefenderDamageTaken(null);
            e.setAttackerDamageTaken(null);
            e.setIsBattleEnded(null);
            e.setWinner(null);
            e.setNextRoundStartedAt(null);
            e.setNextRoundMover(null);
            e.setNextRoundAttackerShip(null);
            e.setNextRoundDefenderShip(null);
            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setShipBattleEventId(eventId);
            return e;
        }

        protected AbstractShipBattleEvent.ShipBattleLootTaken newShipBattleLootTaken(String player, String loserPlayer, String initiator, String responder, Integer choice, Long offChainVersion, String commandId, String requesterId) {
            ShipBattleEventId eventId = new ShipBattleEventId(getState().getId(), null);
            AbstractShipBattleEvent.ShipBattleLootTaken e = new AbstractShipBattleEvent.ShipBattleLootTaken();

            e.setPlayerId(null);
            e.setLoserPlayerId(null);
            e.setInitiatorId(null);
            e.setResponderId(null);
            e.getDynamicProperties().put("choice", choice);
            e.setLoot(null);
            e.setLootedAt(null);
            e.setIncreasedExperience(null);
            e.setNewLevel(null);
            e.setLoserIncreasedExperience(null);
            e.setLoserNewLevel(null);
            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setShipBattleEventId(eventId);
            return e;
        }

    }

}

