// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosinfiniteseas.domain.skillprocess;

import java.util.*;
import org.dddml.aptosinfiniteseas.domain.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.aptosinfiniteseas.specialization.*;

public abstract class AbstractSkillProcessAggregate extends AbstractAggregate implements SkillProcessAggregate {
    private SkillProcessState.MutableSkillProcessState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractSkillProcessAggregate(SkillProcessState state) {
        this.state = (SkillProcessState.MutableSkillProcessState)state;
    }

    public SkillProcessState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        SkillProcessCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleSkillProcessAggregate extends AbstractSkillProcessAggregate {
        public SimpleSkillProcessAggregate(SkillProcessState state) {
            super(state);
        }

        @Override
        public void create(SkillProcessId skillProcessId, Long offChainVersion, String commandId, String requesterId, SkillProcessCommands.Create c) {
            java.util.function.Supplier<SkillProcessEvent.SkillProcessCreated> eventFactory = () -> newSkillProcessCreated(skillProcessId, offChainVersion, commandId, requesterId);
            SkillProcessEvent.SkillProcessCreated e;
            try {
                e = verifyCreate(eventFactory, skillProcessId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void startProduction(Long batchSize, String playerId, Integer playerLevel, SkillTypeItemIdPair itemProductionId, Long offChainVersion, String commandId, String requesterId, SkillProcessCommands.StartProduction c) {
            java.util.function.Supplier<SkillProcessEvent.ProductionProcessStarted> eventFactory = () -> newProductionProcessStarted(batchSize, playerId, playerLevel, itemProductionId, offChainVersion, commandId, requesterId);
            SkillProcessEvent.ProductionProcessStarted e;
            try {
                e = verifyStartProduction(eventFactory, batchSize, playerId, playerLevel, itemProductionId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void completeProduction(String playerId, Integer playerLevel, Long playerExperience, SkillTypeItemIdPair itemProductionId, Long offChainVersion, String commandId, String requesterId, SkillProcessCommands.CompleteProduction c) {
            java.util.function.Supplier<SkillProcessEvent.ProductionProcessCompleted> eventFactory = () -> newProductionProcessCompleted(playerId, playerLevel, playerExperience, itemProductionId, offChainVersion, commandId, requesterId);
            SkillProcessEvent.ProductionProcessCompleted e;
            try {
                e = verifyCompleteProduction(eventFactory, playerId, playerLevel, playerExperience, itemProductionId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void startShipProduction(ItemIdQuantityPairs productionMaterials, String playerId, Integer playerLevel, SkillTypeItemIdPair itemProductionId, Long offChainVersion, String commandId, String requesterId, SkillProcessCommands.StartShipProduction c) {
            java.util.function.Supplier<SkillProcessEvent.ShipProductionProcessStarted> eventFactory = () -> newShipProductionProcessStarted(productionMaterials, playerId, playerLevel, itemProductionId, offChainVersion, commandId, requesterId);
            SkillProcessEvent.ShipProductionProcessStarted e;
            try {
                e = verifyStartShipProduction(eventFactory, productionMaterials, playerId, playerLevel, itemProductionId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void completeShipProduction(String unassignedShips, String playerId, Integer playerLevel, Long playerExperience, SkillTypeItemIdPair itemProductionId, Long offChainVersion, String commandId, String requesterId, SkillProcessCommands.CompleteShipProduction c) {
            java.util.function.Supplier<SkillProcessEvent.ShipProductionProcessCompleted> eventFactory = () -> newShipProductionProcessCompleted(unassignedShips, playerId, playerLevel, playerExperience, itemProductionId, offChainVersion, commandId, requesterId);
            SkillProcessEvent.ShipProductionProcessCompleted e;
            try {
                e = verifyCompleteShipProduction(eventFactory, unassignedShips, playerId, playerLevel, playerExperience, itemProductionId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void startCreation(Long batchSize, String playerId, Integer playerLevel, SkillTypeItemIdPair itemCreationId, Long offChainVersion, String commandId, String requesterId, SkillProcessCommands.StartCreation c) {
            java.util.function.Supplier<SkillProcessEvent.CreationProcessStarted> eventFactory = () -> newCreationProcessStarted(batchSize, playerId, playerLevel, itemCreationId, offChainVersion, commandId, requesterId);
            SkillProcessEvent.CreationProcessStarted e;
            try {
                e = verifyStartCreation(eventFactory, batchSize, playerId, playerLevel, itemCreationId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void completeCreation(String playerId, Integer playerLevel, Long playerExperience, SkillTypeItemIdPair itemCreationId, Long offChainVersion, String commandId, String requesterId, SkillProcessCommands.CompleteCreation c) {
            java.util.function.Supplier<SkillProcessEvent.CreationProcessCompleted> eventFactory = () -> newCreationProcessCompleted(playerId, playerLevel, playerExperience, itemCreationId, offChainVersion, commandId, requesterId);
            SkillProcessEvent.CreationProcessCompleted e;
            try {
                e = verifyCompleteCreation(eventFactory, playerId, playerLevel, playerExperience, itemCreationId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected SkillProcessEvent.SkillProcessCreated verifyCreate(java.util.function.Supplier<SkillProcessEvent.SkillProcessCreated> eventFactory, SkillProcessId skillProcessId, SkillProcessCommands.Create c) {
            SkillProcessId SkillProcessId = skillProcessId;

            SkillProcessEvent.SkillProcessCreated e = (SkillProcessEvent.SkillProcessCreated) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.skillprocess.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SkillProcessState.class, SkillProcessId.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), skillProcessId, VerificationContext.forCommand(c)}
            );

//package org.dddml.aptosinfiniteseas.domain.skillprocess;
//
//public class CreateLogic {
//    public static SkillProcessEvent.SkillProcessCreated verify(java.util.function.Supplier<SkillProcessEvent.SkillProcessCreated> eventFactory, SkillProcessState skillProcessState, SkillProcessId skillProcessId, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected SkillProcessEvent.ProductionProcessStarted verifyStartProduction(java.util.function.Supplier<SkillProcessEvent.ProductionProcessStarted> eventFactory, Long batchSize, String playerId, Integer playerLevel, SkillTypeItemIdPair itemProductionId, SkillProcessCommands.StartProduction c) {
            Long BatchSize = batchSize;
            String PlayerId = playerId;
            Integer PlayerLevel = playerLevel;
            SkillTypeItemIdPair ItemProductionId = itemProductionId;

            SkillProcessEvent.ProductionProcessStarted e = (SkillProcessEvent.ProductionProcessStarted) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.skillprocess.StartProductionLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SkillProcessState.class, Long.class, String.class, Integer.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), batchSize, playerId, playerLevel, itemProductionId, VerificationContext.forCommand(c)}
            );

//package org.dddml.aptosinfiniteseas.domain.skillprocess;
//
//public class StartProductionLogic {
//    public static SkillProcessEvent.ProductionProcessStarted verify(java.util.function.Supplier<SkillProcessEvent.ProductionProcessStarted> eventFactory, SkillProcessState skillProcessState, Long batchSize, String playerId, Integer playerLevel, SkillTypeItemIdPair itemProductionId, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected SkillProcessEvent.ProductionProcessCompleted verifyCompleteProduction(java.util.function.Supplier<SkillProcessEvent.ProductionProcessCompleted> eventFactory, String playerId, Integer playerLevel, Long playerExperience, SkillTypeItemIdPair itemProductionId, SkillProcessCommands.CompleteProduction c) {
            String PlayerId = playerId;
            Integer PlayerLevel = playerLevel;
            Long PlayerExperience = playerExperience;
            SkillTypeItemIdPair ItemProductionId = itemProductionId;

            SkillProcessEvent.ProductionProcessCompleted e = (SkillProcessEvent.ProductionProcessCompleted) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.skillprocess.CompleteProductionLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SkillProcessState.class, String.class, Integer.class, Long.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), playerId, playerLevel, playerExperience, itemProductionId, VerificationContext.forCommand(c)}
            );

//package org.dddml.aptosinfiniteseas.domain.skillprocess;
//
//public class CompleteProductionLogic {
//    public static SkillProcessEvent.ProductionProcessCompleted verify(java.util.function.Supplier<SkillProcessEvent.ProductionProcessCompleted> eventFactory, SkillProcessState skillProcessState, String playerId, Integer playerLevel, Long playerExperience, SkillTypeItemIdPair itemProductionId, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected SkillProcessEvent.ShipProductionProcessStarted verifyStartShipProduction(java.util.function.Supplier<SkillProcessEvent.ShipProductionProcessStarted> eventFactory, ItemIdQuantityPairs productionMaterials, String playerId, Integer playerLevel, SkillTypeItemIdPair itemProductionId, SkillProcessCommands.StartShipProduction c) {
            ItemIdQuantityPairs ProductionMaterials = productionMaterials;
            String PlayerId = playerId;
            Integer PlayerLevel = playerLevel;
            SkillTypeItemIdPair ItemProductionId = itemProductionId;

            SkillProcessEvent.ShipProductionProcessStarted e = (SkillProcessEvent.ShipProductionProcessStarted) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.skillprocess.StartShipProductionLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SkillProcessState.class, ItemIdQuantityPairs.class, String.class, Integer.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), productionMaterials, playerId, playerLevel, itemProductionId, VerificationContext.forCommand(c)}
            );

//package org.dddml.aptosinfiniteseas.domain.skillprocess;
//
//public class StartShipProductionLogic {
//    public static SkillProcessEvent.ShipProductionProcessStarted verify(java.util.function.Supplier<SkillProcessEvent.ShipProductionProcessStarted> eventFactory, SkillProcessState skillProcessState, ItemIdQuantityPairs productionMaterials, String playerId, Integer playerLevel, SkillTypeItemIdPair itemProductionId, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected SkillProcessEvent.ShipProductionProcessCompleted verifyCompleteShipProduction(java.util.function.Supplier<SkillProcessEvent.ShipProductionProcessCompleted> eventFactory, String unassignedShips, String playerId, Integer playerLevel, Long playerExperience, SkillTypeItemIdPair itemProductionId, SkillProcessCommands.CompleteShipProduction c) {
            String UnassignedShips = unassignedShips;
            String PlayerId = playerId;
            Integer PlayerLevel = playerLevel;
            Long PlayerExperience = playerExperience;
            SkillTypeItemIdPair ItemProductionId = itemProductionId;

            SkillProcessEvent.ShipProductionProcessCompleted e = (SkillProcessEvent.ShipProductionProcessCompleted) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.skillprocess.CompleteShipProductionLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SkillProcessState.class, String.class, String.class, Integer.class, Long.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), unassignedShips, playerId, playerLevel, playerExperience, itemProductionId, VerificationContext.forCommand(c)}
            );

//package org.dddml.aptosinfiniteseas.domain.skillprocess;
//
//public class CompleteShipProductionLogic {
//    public static SkillProcessEvent.ShipProductionProcessCompleted verify(java.util.function.Supplier<SkillProcessEvent.ShipProductionProcessCompleted> eventFactory, SkillProcessState skillProcessState, String unassignedShips, String playerId, Integer playerLevel, Long playerExperience, SkillTypeItemIdPair itemProductionId, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected SkillProcessEvent.CreationProcessStarted verifyStartCreation(java.util.function.Supplier<SkillProcessEvent.CreationProcessStarted> eventFactory, Long batchSize, String playerId, Integer playerLevel, SkillTypeItemIdPair itemCreationId, SkillProcessCommands.StartCreation c) {
            Long BatchSize = batchSize;
            String PlayerId = playerId;
            Integer PlayerLevel = playerLevel;
            SkillTypeItemIdPair ItemCreationId = itemCreationId;

            SkillProcessEvent.CreationProcessStarted e = (SkillProcessEvent.CreationProcessStarted) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.skillprocess.StartCreationLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SkillProcessState.class, Long.class, String.class, Integer.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), batchSize, playerId, playerLevel, itemCreationId, VerificationContext.forCommand(c)}
            );

//package org.dddml.aptosinfiniteseas.domain.skillprocess;
//
//public class StartCreationLogic {
//    public static SkillProcessEvent.CreationProcessStarted verify(java.util.function.Supplier<SkillProcessEvent.CreationProcessStarted> eventFactory, SkillProcessState skillProcessState, Long batchSize, String playerId, Integer playerLevel, SkillTypeItemIdPair itemCreationId, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected SkillProcessEvent.CreationProcessCompleted verifyCompleteCreation(java.util.function.Supplier<SkillProcessEvent.CreationProcessCompleted> eventFactory, String playerId, Integer playerLevel, Long playerExperience, SkillTypeItemIdPair itemCreationId, SkillProcessCommands.CompleteCreation c) {
            String PlayerId = playerId;
            Integer PlayerLevel = playerLevel;
            Long PlayerExperience = playerExperience;
            SkillTypeItemIdPair ItemCreationId = itemCreationId;

            SkillProcessEvent.CreationProcessCompleted e = (SkillProcessEvent.CreationProcessCompleted) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.skillprocess.CompleteCreationLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, SkillProcessState.class, String.class, Integer.class, Long.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), playerId, playerLevel, playerExperience, itemCreationId, VerificationContext.forCommand(c)}
            );

//package org.dddml.aptosinfiniteseas.domain.skillprocess;
//
//public class CompleteCreationLogic {
//    public static SkillProcessEvent.CreationProcessCompleted verify(java.util.function.Supplier<SkillProcessEvent.CreationProcessCompleted> eventFactory, SkillProcessState skillProcessState, String playerId, Integer playerLevel, Long playerExperience, SkillTypeItemIdPair itemCreationId, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractSkillProcessEvent.SkillProcessCreated newSkillProcessCreated(SkillProcessId skillProcessId, Long offChainVersion, String commandId, String requesterId) {
            SkillProcessEventId eventId = new SkillProcessEventId(getState().getId(), null);
            AbstractSkillProcessEvent.SkillProcessCreated e = new AbstractSkillProcessEvent.SkillProcessCreated();

            e.getDynamicProperties().put("skillProcessId", skillProcessId);
            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setSkillProcessEventId(eventId);
            return e;
        }

        protected AbstractSkillProcessEvent.ProductionProcessStarted newProductionProcessStarted(Long batchSize, String playerId, Integer playerLevel, SkillTypeItemIdPair itemProductionId, Long offChainVersion, String commandId, String requesterId) {
            SkillProcessEventId eventId = new SkillProcessEventId(getState().getId(), null);
            AbstractSkillProcessEvent.ProductionProcessStarted e = new AbstractSkillProcessEvent.ProductionProcessStarted();

            e.getDynamicProperties().put("batchSize", batchSize);
            e.getDynamicProperties().put("playerId", playerId);
            e.getDynamicProperties().put("playerLevel", playerLevel);
            e.setItemId(null);
            e.setEnergyCost(null);
            e.setStartedAt(null);
            e.setCreationTime(null);
            e.setProductionMaterials(null);
            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setSkillProcessEventId(eventId);
            return e;
        }

        protected AbstractSkillProcessEvent.ProductionProcessCompleted newProductionProcessCompleted(String playerId, Integer playerLevel, Long playerExperience, SkillTypeItemIdPair itemProductionId, Long offChainVersion, String commandId, String requesterId) {
            SkillProcessEventId eventId = new SkillProcessEventId(getState().getId(), null);
            AbstractSkillProcessEvent.ProductionProcessCompleted e = new AbstractSkillProcessEvent.ProductionProcessCompleted();

            e.getDynamicProperties().put("playerId", playerId);
            e.getDynamicProperties().put("playerLevel", playerLevel);
            e.getDynamicProperties().put("playerExperience", playerExperience);
            e.setItemId(null);
            e.setStartedAt(null);
            e.setCreationTime(null);
            e.setEndedAt(null);
            e.setSuccessful(null);
            e.setQuantity(null);
            e.setExperience(null);
            e.setNewLevel(null);
            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setSkillProcessEventId(eventId);
            return e;
        }

        protected AbstractSkillProcessEvent.ShipProductionProcessStarted newShipProductionProcessStarted(ItemIdQuantityPairs productionMaterials, String playerId, Integer playerLevel, SkillTypeItemIdPair itemProductionId, Long offChainVersion, String commandId, String requesterId) {
            SkillProcessEventId eventId = new SkillProcessEventId(getState().getId(), null);
            AbstractSkillProcessEvent.ShipProductionProcessStarted e = new AbstractSkillProcessEvent.ShipProductionProcessStarted();

            e.getDynamicProperties().put("playerId", playerId);
            e.getDynamicProperties().put("playerLevel", playerLevel);
            e.setItemId(null);
            e.setEnergyCost(null);
            e.setStartedAt(null);
            e.setCreationTime(null);
            e.getDynamicProperties().put("productionMaterials", productionMaterials);
            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setSkillProcessEventId(eventId);
            return e;
        }

        protected AbstractSkillProcessEvent.ShipProductionProcessCompleted newShipProductionProcessCompleted(String unassignedShips, String playerId, Integer playerLevel, Long playerExperience, SkillTypeItemIdPair itemProductionId, Long offChainVersion, String commandId, String requesterId) {
            SkillProcessEventId eventId = new SkillProcessEventId(getState().getId(), null);
            AbstractSkillProcessEvent.ShipProductionProcessCompleted e = new AbstractSkillProcessEvent.ShipProductionProcessCompleted();

            e.setUnassignedShipsObjectAddress(null);
            e.getDynamicProperties().put("playerId", playerId);
            e.getDynamicProperties().put("playerLevel", playerLevel);
            e.getDynamicProperties().put("playerExperience", playerExperience);
            e.setItemId(null);
            e.setStartedAt(null);
            e.setCreationTime(null);
            e.setEndedAt(null);
            e.setSuccessful(null);
            e.setQuantity(null);
            e.setExperience(null);
            e.setNewLevel(null);
            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setSkillProcessEventId(eventId);
            return e;
        }

        protected AbstractSkillProcessEvent.CreationProcessStarted newCreationProcessStarted(Long batchSize, String playerId, Integer playerLevel, SkillTypeItemIdPair itemCreationId, Long offChainVersion, String commandId, String requesterId) {
            SkillProcessEventId eventId = new SkillProcessEventId(getState().getId(), null);
            AbstractSkillProcessEvent.CreationProcessStarted e = new AbstractSkillProcessEvent.CreationProcessStarted();

            e.getDynamicProperties().put("batchSize", batchSize);
            e.getDynamicProperties().put("playerId", playerId);
            e.getDynamicProperties().put("playerLevel", playerLevel);
            e.setItemId(null);
            e.setEnergyCost(null);
            e.setResourceCost(null);
            e.setStartedAt(null);
            e.setCreationTime(null);
            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setSkillProcessEventId(eventId);
            return e;
        }

        protected AbstractSkillProcessEvent.CreationProcessCompleted newCreationProcessCompleted(String playerId, Integer playerLevel, Long playerExperience, SkillTypeItemIdPair itemCreationId, Long offChainVersion, String commandId, String requesterId) {
            SkillProcessEventId eventId = new SkillProcessEventId(getState().getId(), null);
            AbstractSkillProcessEvent.CreationProcessCompleted e = new AbstractSkillProcessEvent.CreationProcessCompleted();

            e.getDynamicProperties().put("playerId", playerId);
            e.getDynamicProperties().put("playerLevel", playerLevel);
            e.getDynamicProperties().put("playerExperience", playerExperience);
            e.setItemId(null);
            e.setStartedAt(null);
            e.setCreationTime(null);
            e.setEndedAt(null);
            e.setSuccessful(null);
            e.setQuantity(null);
            e.setExperience(null);
            e.setNewLevel(null);
            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setEventStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setSkillProcessEventId(eventId);
            return e;
        }

    }

}

