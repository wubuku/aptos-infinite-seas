// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosinfiniteseas.domain.skillprocess;

import java.util.*;
import java.math.*;
import org.dddml.aptosinfiniteseas.domain.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.aptosinfiniteseas.specialization.*;
import org.dddml.aptosinfiniteseas.domain.skillprocess.SkillProcessEvent.*;

public abstract class AbstractSkillProcessState implements SkillProcessState.SqlSkillProcessState {

    private String id;

    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    private SkillProcessId skillProcessId;

    public SkillProcessId getSkillProcessId() {
        return this.skillProcessId;
    }

    public void setSkillProcessId(SkillProcessId skillProcessId) {
        this.skillProcessId = skillProcessId;
    }

    private Long itemId;

    public Long getItemId() {
        return this.itemId;
    }

    public void setItemId(Long itemId) {
        this.itemId = itemId;
    }

    private BigInteger startedAt;

    public BigInteger getStartedAt() {
        return this.startedAt;
    }

    public void setStartedAt(BigInteger startedAt) {
        this.startedAt = startedAt;
    }

    private BigInteger creationTime;

    public BigInteger getCreationTime() {
        return this.creationTime;
    }

    public void setCreationTime(BigInteger creationTime) {
        this.creationTime = creationTime;
    }

    private Boolean completed;

    public Boolean getCompleted() {
        return this.completed;
    }

    public void setCompleted(Boolean completed) {
        this.completed = completed;
    }

    private BigInteger endedAt;

    public BigInteger getEndedAt() {
        return this.endedAt;
    }

    public void setEndedAt(BigInteger endedAt) {
        this.endedAt = endedAt;
    }

    private ItemIdQuantityPairs productionMaterials;

    public ItemIdQuantityPairs getProductionMaterials() {
        return this.productionMaterials;
    }

    public void setProductionMaterials(ItemIdQuantityPairs productionMaterials) {
        this.productionMaterials = productionMaterials;
    }

    private Long batchSize;

    public Long getBatchSize() {
        return this.batchSize;
    }

    public void setBatchSize(Long batchSize) {
        this.batchSize = batchSize;
    }

    private BigInteger version;

    public BigInteger getVersion() {
        return this.version;
    }

    public void setVersion(BigInteger version) {
        this.version = version;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractSkillProcessState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setId(((SkillProcessEvent.SqlSkillProcessEvent) events.get(0)).getSkillProcessEventId().getId());
            for (Event e : events) {
                mutate(e);
                this.setOffChainVersion((this.getOffChainVersion() == null ? SkillProcessState.VERSION_NULL : this.getOffChainVersion()) + 1);
            }
        }
    }


    public AbstractSkillProcessState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof SkillProcessState) {
            return Objects.equals(this.getId(), ((SkillProcessState)obj).getId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void merge(SkillProcessState s) {
        if (s == this) {
            return;
        }
        this.setSkillProcessId(s.getSkillProcessId());
        this.setItemId(s.getItemId());
        this.setStartedAt(s.getStartedAt());
        this.setCreationTime(s.getCreationTime());
        this.setCompleted(s.getCompleted());
        this.setEndedAt(s.getEndedAt());
        this.setProductionMaterials(s.getProductionMaterials());
        this.setBatchSize(s.getBatchSize());
        this.setVersion(s.getVersion());
        this.setActive(s.getActive());
    }

    public void when(AbstractSkillProcessEvent.SkillProcessCreated e) {
        throwOnWrongEvent(e);

        SkillProcessId skillProcessId = e.getSkillProcessId();
        SkillProcessId SkillProcessId = skillProcessId;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        SkillProcessState updatedSkillProcessState = (SkillProcessState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.skillprocess.CreateLogic",
                    "mutate",
                    new Class[]{SkillProcessState.class, SkillProcessId.class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, skillProcessId, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.skillprocess;
//
//public class CreateLogic {
//    public static SkillProcessState mutate(SkillProcessState skillProcessState, SkillProcessId skillProcessId, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<SkillProcessState, SkillProcessState.MutableSkillProcessState> mutationContext) {
//    }
//}

        if (this != updatedSkillProcessState) { merge(updatedSkillProcessState); } //else do nothing

    }

    public void when(AbstractSkillProcessEvent.ProductionProcessStarted e) {
        throwOnWrongEvent(e);

        Long batchSize = e.getBatchSize();
        Long BatchSize = batchSize;
        String playerId = e.getPlayerId();
        String PlayerId = playerId;
        Integer playerLevel = e.getPlayerLevel();
        Integer PlayerLevel = playerLevel;
        Long itemId = e.getItemId();
        Long ItemId = itemId;
        BigInteger energyCost = e.getEnergyCost();
        BigInteger EnergyCost = energyCost;
        BigInteger startedAt = e.getStartedAt();
        BigInteger StartedAt = startedAt;
        BigInteger creationTime = e.getCreationTime();
        BigInteger CreationTime = creationTime;
        ItemIdQuantityPairs productionMaterials = e.getProductionMaterials();
        ItemIdQuantityPairs ProductionMaterials = productionMaterials;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        SkillProcessState updatedSkillProcessState = (SkillProcessState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.skillprocess.StartProductionLogic",
                    "mutate",
                    new Class[]{SkillProcessState.class, Long.class, String.class, Integer.class, Long.class, BigInteger.class, BigInteger.class, BigInteger.class, ItemIdQuantityPairs.class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, batchSize, playerId, playerLevel, itemId, energyCost, startedAt, creationTime, productionMaterials, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.skillprocess;
//
//public class StartProductionLogic {
//    public static SkillProcessState mutate(SkillProcessState skillProcessState, Long batchSize, String playerId, Integer playerLevel, Long itemId, BigInteger energyCost, BigInteger startedAt, BigInteger creationTime, ItemIdQuantityPairs productionMaterials, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<SkillProcessState, SkillProcessState.MutableSkillProcessState> mutationContext) {
//    }
//}

        if (this != updatedSkillProcessState) { merge(updatedSkillProcessState); } //else do nothing

    }

    public void when(AbstractSkillProcessEvent.ProductionProcessCompleted e) {
        throwOnWrongEvent(e);

        String playerId = e.getPlayerId();
        String PlayerId = playerId;
        Integer playerLevel = e.getPlayerLevel();
        Integer PlayerLevel = playerLevel;
        Long playerExperience = e.getPlayerExperience();
        Long PlayerExperience = playerExperience;
        Long itemId = e.getItemId();
        Long ItemId = itemId;
        BigInteger startedAt = e.getStartedAt();
        BigInteger StartedAt = startedAt;
        BigInteger creationTime = e.getCreationTime();
        BigInteger CreationTime = creationTime;
        BigInteger endedAt = e.getEndedAt();
        BigInteger EndedAt = endedAt;
        Boolean successful = e.getSuccessful();
        Boolean Successful = successful;
        Long quantity = e.getQuantity();
        Long Quantity = quantity;
        Long experience = e.getExperience();
        Long Experience = experience;
        Integer newLevel = e.getNewLevel();
        Integer NewLevel = newLevel;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        SkillProcessState updatedSkillProcessState = (SkillProcessState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.skillprocess.CompleteProductionLogic",
                    "mutate",
                    new Class[]{SkillProcessState.class, String.class, Integer.class, Long.class, Long.class, BigInteger.class, BigInteger.class, BigInteger.class, Boolean.class, Long.class, Long.class, Integer.class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, playerId, playerLevel, playerExperience, itemId, startedAt, creationTime, endedAt, successful, quantity, experience, newLevel, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.skillprocess;
//
//public class CompleteProductionLogic {
//    public static SkillProcessState mutate(SkillProcessState skillProcessState, String playerId, Integer playerLevel, Long playerExperience, Long itemId, BigInteger startedAt, BigInteger creationTime, BigInteger endedAt, Boolean successful, Long quantity, Long experience, Integer newLevel, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<SkillProcessState, SkillProcessState.MutableSkillProcessState> mutationContext) {
//    }
//}

        if (this != updatedSkillProcessState) { merge(updatedSkillProcessState); } //else do nothing

    }

    public void when(AbstractSkillProcessEvent.ShipProductionProcessStarted e) {
        throwOnWrongEvent(e);

        String playerId = e.getPlayerId();
        String PlayerId = playerId;
        Integer playerLevel = e.getPlayerLevel();
        Integer PlayerLevel = playerLevel;
        Long itemId = e.getItemId();
        Long ItemId = itemId;
        BigInteger energyCost = e.getEnergyCost();
        BigInteger EnergyCost = energyCost;
        BigInteger startedAt = e.getStartedAt();
        BigInteger StartedAt = startedAt;
        BigInteger creationTime = e.getCreationTime();
        BigInteger CreationTime = creationTime;
        ItemIdQuantityPairs productionMaterials = e.getProductionMaterials();
        ItemIdQuantityPairs ProductionMaterials = productionMaterials;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        SkillProcessState updatedSkillProcessState = (SkillProcessState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.skillprocess.StartShipProductionLogic",
                    "mutate",
                    new Class[]{SkillProcessState.class, String.class, Integer.class, Long.class, BigInteger.class, BigInteger.class, BigInteger.class, ItemIdQuantityPairs.class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, playerId, playerLevel, itemId, energyCost, startedAt, creationTime, productionMaterials, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.skillprocess;
//
//public class StartShipProductionLogic {
//    public static SkillProcessState mutate(SkillProcessState skillProcessState, String playerId, Integer playerLevel, Long itemId, BigInteger energyCost, BigInteger startedAt, BigInteger creationTime, ItemIdQuantityPairs productionMaterials, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<SkillProcessState, SkillProcessState.MutableSkillProcessState> mutationContext) {
//    }
//}

        if (this != updatedSkillProcessState) { merge(updatedSkillProcessState); } //else do nothing

    }

    public void when(AbstractSkillProcessEvent.ShipProductionProcessCompleted e) {
        throwOnWrongEvent(e);

        String unassignedShipsObjectAddress = e.getUnassignedShipsObjectAddress();
        String UnassignedShipsObjectAddress = unassignedShipsObjectAddress;
        String playerId = e.getPlayerId();
        String PlayerId = playerId;
        Integer playerLevel = e.getPlayerLevel();
        Integer PlayerLevel = playerLevel;
        Long playerExperience = e.getPlayerExperience();
        Long PlayerExperience = playerExperience;
        Long itemId = e.getItemId();
        Long ItemId = itemId;
        BigInteger startedAt = e.getStartedAt();
        BigInteger StartedAt = startedAt;
        BigInteger creationTime = e.getCreationTime();
        BigInteger CreationTime = creationTime;
        BigInteger endedAt = e.getEndedAt();
        BigInteger EndedAt = endedAt;
        Boolean successful = e.getSuccessful();
        Boolean Successful = successful;
        Long quantity = e.getQuantity();
        Long Quantity = quantity;
        Long experience = e.getExperience();
        Long Experience = experience;
        Integer newLevel = e.getNewLevel();
        Integer NewLevel = newLevel;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        SkillProcessState updatedSkillProcessState = (SkillProcessState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.skillprocess.CompleteShipProductionLogic",
                    "mutate",
                    new Class[]{SkillProcessState.class, String.class, String.class, Integer.class, Long.class, Long.class, BigInteger.class, BigInteger.class, BigInteger.class, Boolean.class, Long.class, Long.class, Integer.class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, unassignedShipsObjectAddress, playerId, playerLevel, playerExperience, itemId, startedAt, creationTime, endedAt, successful, quantity, experience, newLevel, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.skillprocess;
//
//public class CompleteShipProductionLogic {
//    public static SkillProcessState mutate(SkillProcessState skillProcessState, String unassignedShipsObjectAddress, String playerId, Integer playerLevel, Long playerExperience, Long itemId, BigInteger startedAt, BigInteger creationTime, BigInteger endedAt, Boolean successful, Long quantity, Long experience, Integer newLevel, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<SkillProcessState, SkillProcessState.MutableSkillProcessState> mutationContext) {
//    }
//}

        if (this != updatedSkillProcessState) { merge(updatedSkillProcessState); } //else do nothing

    }

    public void when(AbstractSkillProcessEvent.CreationProcessStarted e) {
        throwOnWrongEvent(e);

        Long batchSize = e.getBatchSize();
        Long BatchSize = batchSize;
        String playerId = e.getPlayerId();
        String PlayerId = playerId;
        Integer playerLevel = e.getPlayerLevel();
        Integer PlayerLevel = playerLevel;
        Long itemId = e.getItemId();
        Long ItemId = itemId;
        BigInteger energyCost = e.getEnergyCost();
        BigInteger EnergyCost = energyCost;
        Long resourceCost = e.getResourceCost();
        Long ResourceCost = resourceCost;
        BigInteger startedAt = e.getStartedAt();
        BigInteger StartedAt = startedAt;
        BigInteger creationTime = e.getCreationTime();
        BigInteger CreationTime = creationTime;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        SkillProcessState updatedSkillProcessState = (SkillProcessState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.skillprocess.StartCreationLogic",
                    "mutate",
                    new Class[]{SkillProcessState.class, Long.class, String.class, Integer.class, Long.class, BigInteger.class, Long.class, BigInteger.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, batchSize, playerId, playerLevel, itemId, energyCost, resourceCost, startedAt, creationTime, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.skillprocess;
//
//public class StartCreationLogic {
//    public static SkillProcessState mutate(SkillProcessState skillProcessState, Long batchSize, String playerId, Integer playerLevel, Long itemId, BigInteger energyCost, Long resourceCost, BigInteger startedAt, BigInteger creationTime, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<SkillProcessState, SkillProcessState.MutableSkillProcessState> mutationContext) {
//    }
//}

        if (this != updatedSkillProcessState) { merge(updatedSkillProcessState); } //else do nothing

    }

    public void when(AbstractSkillProcessEvent.CreationProcessCompleted e) {
        throwOnWrongEvent(e);

        String playerId = e.getPlayerId();
        String PlayerId = playerId;
        Integer playerLevel = e.getPlayerLevel();
        Integer PlayerLevel = playerLevel;
        Long playerExperience = e.getPlayerExperience();
        Long PlayerExperience = playerExperience;
        Long itemId = e.getItemId();
        Long ItemId = itemId;
        BigInteger startedAt = e.getStartedAt();
        BigInteger StartedAt = startedAt;
        BigInteger creationTime = e.getCreationTime();
        BigInteger CreationTime = creationTime;
        BigInteger endedAt = e.getEndedAt();
        BigInteger EndedAt = endedAt;
        Boolean successful = e.getSuccessful();
        Boolean Successful = successful;
        Long quantity = e.getQuantity();
        Long Quantity = quantity;
        Long experience = e.getExperience();
        Long Experience = experience;
        Integer newLevel = e.getNewLevel();
        Integer NewLevel = newLevel;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        SkillProcessState updatedSkillProcessState = (SkillProcessState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.skillprocess.CompleteCreationLogic",
                    "mutate",
                    new Class[]{SkillProcessState.class, String.class, Integer.class, Long.class, Long.class, BigInteger.class, BigInteger.class, BigInteger.class, Boolean.class, Long.class, Long.class, Integer.class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, playerId, playerLevel, playerExperience, itemId, startedAt, creationTime, endedAt, successful, quantity, experience, newLevel, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.skillprocess;
//
//public class CompleteCreationLogic {
//    public static SkillProcessState mutate(SkillProcessState skillProcessState, String playerId, Integer playerLevel, Long playerExperience, Long itemId, BigInteger startedAt, BigInteger creationTime, BigInteger endedAt, Boolean successful, Long quantity, Long experience, Integer newLevel, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<SkillProcessState, SkillProcessState.MutableSkillProcessState> mutationContext) {
//    }
//}

        if (this != updatedSkillProcessState) { merge(updatedSkillProcessState); } //else do nothing

    }

    public void save() {
    }

    protected void throwOnWrongEvent(SkillProcessEvent event) {
        String stateEntityId = this.getId(); // Aggregate Id
        String eventEntityId = ((SkillProcessEvent.SqlSkillProcessEvent)event).getSkillProcessEventId().getId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getOffChainVersion();

    }


    public static class SimpleSkillProcessState extends AbstractSkillProcessState {

        public SimpleSkillProcessState() {
        }

        public SimpleSkillProcessState(List<Event> events) {
            super(events);
        }

        public static SimpleSkillProcessState newForReapplying() {
            SimpleSkillProcessState s = new SimpleSkillProcessState();
            s.initializeForReapplying();
            return s;
        }

    }



}

