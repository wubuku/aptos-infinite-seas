// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.dddml.aptosinfiniteseas.domain.roster;

import java.util.*;
import java.math.*;
import org.dddml.aptosinfiniteseas.domain.*;
import java.math.BigInteger;
import java.util.Date;
import org.dddml.aptosinfiniteseas.specialization.*;
import org.dddml.aptosinfiniteseas.domain.roster.RosterEvent.*;

public abstract class AbstractRosterState implements RosterState.SqlRosterState {

    private String id;

    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    private RosterId rosterId;

    public RosterId getRosterId() {
        return this.rosterId;
    }

    public void setRosterId(RosterId rosterId) {
        this.rosterId = rosterId;
    }

    private Integer status;

    public Integer getStatus() {
        return this.status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    private Long speed;

    public Long getSpeed() {
        return this.speed;
    }

    public void setSpeed(Long speed) {
        this.speed = speed;
    }

    private Coordinates updatedCoordinates;

    public Coordinates getUpdatedCoordinates() {
        return this.updatedCoordinates;
    }

    public void setUpdatedCoordinates(Coordinates updatedCoordinates) {
        this.updatedCoordinates = updatedCoordinates;
    }

    private BigInteger coordinatesUpdatedAt;

    public BigInteger getCoordinatesUpdatedAt() {
        return this.coordinatesUpdatedAt;
    }

    public void setCoordinatesUpdatedAt(BigInteger coordinatesUpdatedAt) {
        this.coordinatesUpdatedAt = coordinatesUpdatedAt;
    }

    private Coordinates targetCoordinates;

    public Coordinates getTargetCoordinates() {
        return this.targetCoordinates;
    }

    public void setTargetCoordinates(Coordinates targetCoordinates) {
        this.targetCoordinates = targetCoordinates;
    }

    private Coordinates originCoordinates;

    public Coordinates getOriginCoordinates() {
        return this.originCoordinates;
    }

    public void setOriginCoordinates(Coordinates originCoordinates) {
        this.originCoordinates = originCoordinates;
    }

    private BigInteger sailDuration;

    public BigInteger getSailDuration() {
        return this.sailDuration;
    }

    public void setSailDuration(BigInteger sailDuration) {
        this.sailDuration = sailDuration;
    }

    private String shipBattleId;

    public String getShipBattleId() {
        return this.shipBattleId;
    }

    public void setShipBattleId(String shipBattleId) {
        this.shipBattleId = shipBattleId;
    }

    private Boolean environmentOwned;

    public Boolean getEnvironmentOwned() {
        return this.environmentOwned;
    }

    public void setEnvironmentOwned(Boolean environmentOwned) {
        this.environmentOwned = environmentOwned;
    }

    private Long baseExperience;

    public Long getBaseExperience() {
        return this.baseExperience;
    }

    public void setBaseExperience(Long baseExperience) {
        this.baseExperience = baseExperience;
    }

    private BigInteger version;

    public BigInteger getVersion() {
        return this.version;
    }

    public void setVersion(BigInteger version) {
        this.version = version;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    private Set<String> shipIds;

    public Set<String> getShipIds() {
        return this.shipIds;
    }

    public void setShipIds(Set<String> shipIds) {
        this.shipIds = shipIds;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractRosterState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setId(((RosterEvent.SqlRosterEvent) events.get(0)).getRosterEventId().getId());
            for (Event e : events) {
                mutate(e);
                this.setOffChainVersion((this.getOffChainVersion() == null ? RosterState.VERSION_NULL : this.getOffChainVersion()) + 1);
            }
        }
    }


    public AbstractRosterState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof RosterState) {
            return Objects.equals(this.getId(), ((RosterState)obj).getId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else if (e instanceof AbstractRosterEvent.EnvironmentRosterCreated) {
            when((AbstractRosterEvent.EnvironmentRosterCreated)e);
        } else if (e instanceof AbstractRosterEvent.RosterSetSail) {
            when((AbstractRosterEvent.RosterSetSail)e);
        } else if (e instanceof AbstractRosterEvent.RosterShipsPositionAdjusted) {
            when((AbstractRosterEvent.RosterShipsPositionAdjusted)e);
        } else if (e instanceof AbstractRosterEvent.RosterShipTransferred) {
            when((AbstractRosterEvent.RosterShipTransferred)e);
        } else if (e instanceof AbstractRosterEvent.RosterShipInventoryTransferred) {
            when((AbstractRosterEvent.RosterShipInventoryTransferred)e);
        } else if (e instanceof AbstractRosterEvent.RosterShipInventoryTakenOut) {
            when((AbstractRosterEvent.RosterShipInventoryTakenOut)e);
        } else if (e instanceof AbstractRosterEvent.RosterShipInventoryPutIn) {
            when((AbstractRosterEvent.RosterShipInventoryPutIn)e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void merge(RosterState s) {
        if (s == this) {
            return;
        }
        this.setRosterId(s.getRosterId());
        this.setStatus(s.getStatus());
        this.setSpeed(s.getSpeed());
        this.setShipIds(s.getShipIds());
        this.setUpdatedCoordinates(s.getUpdatedCoordinates());
        this.setCoordinatesUpdatedAt(s.getCoordinatesUpdatedAt());
        this.setTargetCoordinates(s.getTargetCoordinates());
        this.setOriginCoordinates(s.getOriginCoordinates());
        this.setSailDuration(s.getSailDuration());
        this.setShipBattleId(s.getShipBattleId());
        this.setEnvironmentOwned(s.getEnvironmentOwned());
        this.setBaseExperience(s.getBaseExperience());
        this.setVersion(s.getVersion());
        this.setActive(s.getActive());
    }

    public void when(AbstractRosterEvent.RosterCreated e) {
        throwOnWrongEvent(e);

        RosterId rosterId = e.getRosterId();
        RosterId RosterId = rosterId;
        Integer status = e.getStatus();
        Integer Status = status;
        Long speed = e.getSpeed();
        Long Speed = speed;
        Coordinates updatedCoordinates = e.getUpdatedCoordinates();
        Coordinates UpdatedCoordinates = updatedCoordinates;
        BigInteger coordinatesUpdatedAt = e.getCoordinatesUpdatedAt();
        BigInteger CoordinatesUpdatedAt = coordinatesUpdatedAt;
        Coordinates targetCoordinates = e.getTargetCoordinates();
        Coordinates TargetCoordinates = targetCoordinates;
        Coordinates originCoordinates = e.getOriginCoordinates();
        Coordinates OriginCoordinates = originCoordinates;
        String shipBattleId = e.getShipBattleId();
        String ShipBattleId = shipBattleId;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.roster.CreateLogic",
                    "mutate",
                    new Class[]{RosterState.class, RosterId.class, Integer.class, Long.class, Coordinates.class, BigInteger.class, Coordinates.class, Coordinates.class, String.class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, rosterId, status, speed, updatedCoordinates, coordinatesUpdatedAt, targetCoordinates, originCoordinates, shipBattleId, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.roster;
//
//public class CreateLogic {
//    public static RosterState mutate(RosterState rosterState, RosterId rosterId, Integer status, Long speed, Coordinates updatedCoordinates, BigInteger coordinatesUpdatedAt, Coordinates targetCoordinates, Coordinates originCoordinates, String shipBattleId, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void when(AbstractRosterEvent.EnvironmentRosterCreated e) {
        throwOnWrongEvent(e);

        RosterId rosterId = e.getRosterId();
        RosterId RosterId = rosterId;
        Coordinates coordinates = e.getCoordinates();
        Coordinates Coordinates = coordinates;
        Long shipResourceQuantity = e.getShipResourceQuantity();
        Long ShipResourceQuantity = shipResourceQuantity;
        Long shipBaseResourceQuantity = e.getShipBaseResourceQuantity();
        Long ShipBaseResourceQuantity = shipBaseResourceQuantity;
        Long baseExperience = e.getBaseExperience();
        Long BaseExperience = baseExperience;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.roster.CreateEnvironmentRosterLogic",
                    "mutate",
                    new Class[]{RosterState.class, RosterId.class, Coordinates.class, Long.class, Long.class, Long.class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, rosterId, coordinates, shipResourceQuantity, shipBaseResourceQuantity, baseExperience, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.roster;
//
//public class CreateEnvironmentRosterLogic {
//    public static RosterState mutate(RosterState rosterState, RosterId rosterId, Coordinates coordinates, Long shipResourceQuantity, Long shipBaseResourceQuantity, Long baseExperience, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void when(AbstractRosterEvent.RosterShipAdded e) {
        throwOnWrongEvent(e);

        String ship = e.getShip();
        String Ship = ship;
        BigInteger position = e.getPosition();
        BigInteger Position = position;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.roster.AddShipLogic",
                    "mutate",
                    new Class[]{RosterState.class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, ship, position, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.roster;
//
//public class AddShipLogic {
//    public static RosterState mutate(RosterState rosterState, String ship, BigInteger position, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void when(AbstractRosterEvent.RosterSetSail e) {
        throwOnWrongEvent(e);

        String playerId = e.getPlayerId();
        String PlayerId = playerId;
        Coordinates targetCoordinates = e.getTargetCoordinates();
        Coordinates TargetCoordinates = targetCoordinates;
        BigInteger sailDuration = e.getSailDuration();
        BigInteger SailDuration = sailDuration;
        BigInteger setSailAt = e.getSetSailAt();
        BigInteger SetSailAt = setSailAt;
        Coordinates updatedCoordinates = e.getUpdatedCoordinates();
        Coordinates UpdatedCoordinates = updatedCoordinates;
        BigInteger energyCost = e.getEnergyCost();
        BigInteger EnergyCost = energyCost;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.roster.SetSailLogic",
                    "mutate",
                    new Class[]{RosterState.class, String.class, Coordinates.class, BigInteger.class, BigInteger.class, Coordinates.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, playerId, targetCoordinates, sailDuration, setSailAt, updatedCoordinates, energyCost, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.roster;
//
//public class SetSailLogic {
//    public static RosterState mutate(RosterState rosterState, String playerId, Coordinates targetCoordinates, BigInteger sailDuration, BigInteger setSailAt, Coordinates updatedCoordinates, BigInteger energyCost, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void when(AbstractRosterEvent.RosterShipsPositionAdjusted e) {
        throwOnWrongEvent(e);

        String playerId = e.getPlayerId();
        String PlayerId = playerId;
        BigInteger[] positions = e.getPositions();
        BigInteger[] Positions = positions;
        String[] shipIds = e.getShipIds();
        String[] ShipIds = shipIds;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.roster.AdjustShipsPositionLogic",
                    "mutate",
                    new Class[]{RosterState.class, String.class, BigInteger[].class, String[].class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, playerId, positions, shipIds, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.roster;
//
//public class AdjustShipsPositionLogic {
//    public static RosterState mutate(RosterState rosterState, String playerId, BigInteger[] positions, String[] shipIds, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void when(AbstractRosterEvent.RosterShipTransferred e) {
        throwOnWrongEvent(e);

        String playerId = e.getPlayerId();
        String PlayerId = playerId;
        String shipId = e.getShipId();
        String ShipId = shipId;
        String toRoster = e.getToRoster();
        String ToRoster = toRoster;
        BigInteger toPosition = e.getToPosition();
        BigInteger ToPosition = toPosition;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.roster.TransferShipLogic",
                    "mutate",
                    new Class[]{RosterState.class, String.class, String.class, String.class, BigInteger.class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, playerId, shipId, toRoster, toPosition, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.roster;
//
//public class TransferShipLogic {
//    public static RosterState mutate(RosterState rosterState, String playerId, String shipId, String toRoster, BigInteger toPosition, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void when(AbstractRosterEvent.RosterShipInventoryTransferred e) {
        throwOnWrongEvent(e);

        String playerId = e.getPlayerId();
        String PlayerId = playerId;
        String fromShipId = e.getFromShipId();
        String FromShipId = fromShipId;
        String toShipId = e.getToShipId();
        String ToShipId = toShipId;
        ItemIdQuantityPairs itemIdQuantityPairs = e.getItemIdQuantityPairs();
        ItemIdQuantityPairs ItemIdQuantityPairs = itemIdQuantityPairs;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.roster.TransferShipInventoryLogic",
                    "mutate",
                    new Class[]{RosterState.class, String.class, String.class, String.class, ItemIdQuantityPairs.class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, playerId, fromShipId, toShipId, itemIdQuantityPairs, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.roster;
//
//public class TransferShipInventoryLogic {
//    public static RosterState mutate(RosterState rosterState, String playerId, String fromShipId, String toShipId, ItemIdQuantityPairs itemIdQuantityPairs, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void when(AbstractRosterEvent.RosterShipInventoryTakenOut e) {
        throwOnWrongEvent(e);

        String playerId = e.getPlayerId();
        String PlayerId = playerId;
        String shipId = e.getShipId();
        String ShipId = shipId;
        ItemIdQuantityPairs itemIdQuantityPairs = e.getItemIdQuantityPairs();
        ItemIdQuantityPairs ItemIdQuantityPairs = itemIdQuantityPairs;
        Coordinates updatedCoordinates = e.getUpdatedCoordinates();
        Coordinates UpdatedCoordinates = updatedCoordinates;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.roster.TakeOutShipInventoryLogic",
                    "mutate",
                    new Class[]{RosterState.class, String.class, String.class, ItemIdQuantityPairs.class, Coordinates.class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, playerId, shipId, itemIdQuantityPairs, updatedCoordinates, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.roster;
//
//public class TakeOutShipInventoryLogic {
//    public static RosterState mutate(RosterState rosterState, String playerId, String shipId, ItemIdQuantityPairs itemIdQuantityPairs, Coordinates updatedCoordinates, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void when(AbstractRosterEvent.RosterShipInventoryPutIn e) {
        throwOnWrongEvent(e);

        String playerId = e.getPlayerId();
        String PlayerId = playerId;
        String shipId = e.getShipId();
        String ShipId = shipId;
        ItemIdQuantityPairs itemIdQuantityPairs = e.getItemIdQuantityPairs();
        ItemIdQuantityPairs ItemIdQuantityPairs = itemIdQuantityPairs;
        Coordinates updatedCoordinates = e.getUpdatedCoordinates();
        Coordinates UpdatedCoordinates = updatedCoordinates;
        BigInteger aptosEventVersion = e.getAptosEventVersion();
        BigInteger AptosEventVersion = aptosEventVersion;
        BigInteger aptosEventSequenceNumber = e.getAptosEventSequenceNumber();
        BigInteger AptosEventSequenceNumber = aptosEventSequenceNumber;
        String aptosEventType = e.getAptosEventType();
        String AptosEventType = aptosEventType;
        AptosEventGuid aptosEventGuid = e.getAptosEventGuid();
        AptosEventGuid AptosEventGuid = aptosEventGuid;
        String eventStatus = e.getEventStatus();
        String EventStatus = eventStatus;

        if (this.getCreatedBy() == null){
            this.setCreatedBy(e.getCreatedBy());
        }
        if (this.getCreatedAt() == null){
            this.setCreatedAt(e.getCreatedAt());
        }
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

        RosterState updatedRosterState = (RosterState) ReflectUtils.invokeStaticMethod(
                    "org.dddml.aptosinfiniteseas.domain.roster.PutInShipInventoryLogic",
                    "mutate",
                    new Class[]{RosterState.class, String.class, String.class, ItemIdQuantityPairs.class, Coordinates.class, BigInteger.class, BigInteger.class, String.class, AptosEventGuid.class, String.class, MutationContext.class},
                    new Object[]{this, playerId, shipId, itemIdQuantityPairs, updatedCoordinates, aptosEventVersion, aptosEventSequenceNumber, aptosEventType, aptosEventGuid, eventStatus, MutationContext.forEvent(e, s -> {if (s == this) {return this;} else {throw new UnsupportedOperationException();}})}
            );

//package org.dddml.aptosinfiniteseas.domain.roster;
//
//public class PutInShipInventoryLogic {
//    public static RosterState mutate(RosterState rosterState, String playerId, String shipId, ItemIdQuantityPairs itemIdQuantityPairs, Coordinates updatedCoordinates, BigInteger aptosEventVersion, BigInteger aptosEventSequenceNumber, String aptosEventType, AptosEventGuid aptosEventGuid, String eventStatus, MutationContext<RosterState, RosterState.MutableRosterState> mutationContext) {
//    }
//}

        if (this != updatedRosterState) { merge(updatedRosterState); } //else do nothing

    }

    public void save() {
    }

    protected void throwOnWrongEvent(RosterEvent event) {
        String stateEntityId = this.getId(); // Aggregate Id
        String eventEntityId = ((RosterEvent.SqlRosterEvent)event).getRosterEventId().getId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getOffChainVersion();

    }


    public static class SimpleRosterState extends AbstractRosterState {

        public SimpleRosterState() {
        }

        public SimpleRosterState(List<Event> events) {
            super(events);
        }

        public static SimpleRosterState newForReapplying() {
            SimpleRosterState s = new SimpleRosterState();
            s.initializeForReapplying();
            return s;
        }

    }



}

