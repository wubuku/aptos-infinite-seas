// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_seas_common::item_production {
    use aptos_framework::account;
    use aptos_framework::event;
    use aptos_std::table::{Self, Table};
    use infinite_seas_common::item_id_quantity_pairs::ItemIdQuantityPairs;
    use infinite_seas_common::infinite_seas_common_pass_object as pass_object;
    use infinite_seas_common::skill_type_item_id_pair::SkillTypeItemIdPair;
    friend infinite_seas_common::item_production_create_logic;
    friend infinite_seas_common::item_production_update_logic;
    friend infinite_seas_common::item_production_aggregate;

    const EIdAlreadyExists: u64 = 101;
    const EDataTooLong: u64 = 102;
    const EInappropriateVersion: u64 = 103;
    const ENotInitialized: u64 = 110;

    struct Events has key {
        item_production_created_handle: event::EventHandle<ItemProductionCreated>,
        item_production_updated_handle: event::EventHandle<ItemProductionUpdated>,
    }

    struct Tables has key {
        item_production_table: Table<SkillTypeItemIdPair, ItemProduction>,
    }

    public fun initialize(store_account: &signer) {
        move_to(store_account, Events {
            item_production_created_handle: account::new_event_handle<ItemProductionCreated>(store_account),
            item_production_updated_handle: account::new_event_handle<ItemProductionUpdated>(store_account),
        });

        move_to(
            store_account,
            Tables {
                item_production_table: table::new(),
            },
        );

    }

    struct ItemProduction has store {
        item_production_id: SkillTypeItemIdPair,
        version: u64,
        production_materials: ItemIdQuantityPairs,
        requirements_level: u16,
        base_quantity: u32,
        base_experience: u32,
        base_creation_time: u64,
        energy_cost: u64,
        success_rate: u16,
    }

    public fun item_production_id(item_production: &ItemProduction): SkillTypeItemIdPair {
        item_production.item_production_id
    }

    public fun version(item_production: &ItemProduction): u64 {
        item_production.version
    }

    public fun production_materials(item_production: &ItemProduction): ItemIdQuantityPairs {
        item_production.production_materials
    }

    public(friend) fun set_production_materials(item_production: &mut ItemProduction, production_materials: ItemIdQuantityPairs) {
        item_production.production_materials = production_materials;
    }

    public fun requirements_level(item_production: &ItemProduction): u16 {
        item_production.requirements_level
    }

    public(friend) fun set_requirements_level(item_production: &mut ItemProduction, requirements_level: u16) {
        item_production.requirements_level = requirements_level;
    }

    public fun base_quantity(item_production: &ItemProduction): u32 {
        item_production.base_quantity
    }

    public(friend) fun set_base_quantity(item_production: &mut ItemProduction, base_quantity: u32) {
        item_production.base_quantity = base_quantity;
    }

    public fun base_experience(item_production: &ItemProduction): u32 {
        item_production.base_experience
    }

    public(friend) fun set_base_experience(item_production: &mut ItemProduction, base_experience: u32) {
        item_production.base_experience = base_experience;
    }

    public fun base_creation_time(item_production: &ItemProduction): u64 {
        item_production.base_creation_time
    }

    public(friend) fun set_base_creation_time(item_production: &mut ItemProduction, base_creation_time: u64) {
        item_production.base_creation_time = base_creation_time;
    }

    public fun energy_cost(item_production: &ItemProduction): u64 {
        item_production.energy_cost
    }

    public(friend) fun set_energy_cost(item_production: &mut ItemProduction, energy_cost: u64) {
        item_production.energy_cost = energy_cost;
    }

    public fun success_rate(item_production: &ItemProduction): u16 {
        item_production.success_rate
    }

    public(friend) fun set_success_rate(item_production: &mut ItemProduction, success_rate: u16) {
        item_production.success_rate = success_rate;
    }

    fun new_item_production(
        item_production_id: SkillTypeItemIdPair,
        production_materials: ItemIdQuantityPairs,
        requirements_level: u16,
        base_quantity: u32,
        base_experience: u32,
        base_creation_time: u64,
        energy_cost: u64,
        success_rate: u16,
    ): ItemProduction {
        ItemProduction {
            item_production_id,
            version: 0,
            production_materials,
            requirements_level,
            base_quantity,
            base_experience,
            base_creation_time,
            energy_cost,
            success_rate,
        }
    }

    struct ItemProductionCreated has store, drop {
        item_production_id: SkillTypeItemIdPair,
        production_materials: ItemIdQuantityPairs,
        requirements_level: u16,
        base_quantity: u32,
        base_experience: u32,
        base_creation_time: u64,
        energy_cost: u64,
        success_rate: u16,
    }

    public fun item_production_created_item_production_id(item_production_created: &ItemProductionCreated): SkillTypeItemIdPair {
        item_production_created.item_production_id
    }

    public fun item_production_created_production_materials(item_production_created: &ItemProductionCreated): ItemIdQuantityPairs {
        item_production_created.production_materials
    }

    public fun item_production_created_requirements_level(item_production_created: &ItemProductionCreated): u16 {
        item_production_created.requirements_level
    }

    public fun item_production_created_base_quantity(item_production_created: &ItemProductionCreated): u32 {
        item_production_created.base_quantity
    }

    public fun item_production_created_base_experience(item_production_created: &ItemProductionCreated): u32 {
        item_production_created.base_experience
    }

    public fun item_production_created_base_creation_time(item_production_created: &ItemProductionCreated): u64 {
        item_production_created.base_creation_time
    }

    public fun item_production_created_energy_cost(item_production_created: &ItemProductionCreated): u64 {
        item_production_created.energy_cost
    }

    public fun item_production_created_success_rate(item_production_created: &ItemProductionCreated): u16 {
        item_production_created.success_rate
    }

    public(friend) fun new_item_production_created(
        item_production_id: SkillTypeItemIdPair,
        production_materials: ItemIdQuantityPairs,
        requirements_level: u16,
        base_quantity: u32,
        base_experience: u32,
        base_creation_time: u64,
        energy_cost: u64,
        success_rate: u16,
    ): ItemProductionCreated {
        ItemProductionCreated {
            item_production_id,
            production_materials,
            requirements_level,
            base_quantity,
            base_experience,
            base_creation_time,
            energy_cost,
            success_rate,
        }
    }

    struct ItemProductionUpdated has store, drop {
        item_production_id: SkillTypeItemIdPair,
        version: u64,
        production_materials: ItemIdQuantityPairs,
        requirements_level: u16,
        base_quantity: u32,
        base_experience: u32,
        base_creation_time: u64,
        energy_cost: u64,
        success_rate: u16,
    }

    public fun item_production_updated_item_production_id(item_production_updated: &ItemProductionUpdated): SkillTypeItemIdPair {
        item_production_updated.item_production_id
    }

    public fun item_production_updated_production_materials(item_production_updated: &ItemProductionUpdated): ItemIdQuantityPairs {
        item_production_updated.production_materials
    }

    public fun item_production_updated_requirements_level(item_production_updated: &ItemProductionUpdated): u16 {
        item_production_updated.requirements_level
    }

    public fun item_production_updated_base_quantity(item_production_updated: &ItemProductionUpdated): u32 {
        item_production_updated.base_quantity
    }

    public fun item_production_updated_base_experience(item_production_updated: &ItemProductionUpdated): u32 {
        item_production_updated.base_experience
    }

    public fun item_production_updated_base_creation_time(item_production_updated: &ItemProductionUpdated): u64 {
        item_production_updated.base_creation_time
    }

    public fun item_production_updated_energy_cost(item_production_updated: &ItemProductionUpdated): u64 {
        item_production_updated.energy_cost
    }

    public fun item_production_updated_success_rate(item_production_updated: &ItemProductionUpdated): u16 {
        item_production_updated.success_rate
    }

    public(friend) fun new_item_production_updated(
        item_production: &ItemProduction,
        production_materials: ItemIdQuantityPairs,
        requirements_level: u16,
        base_quantity: u32,
        base_experience: u32,
        base_creation_time: u64,
        energy_cost: u64,
        success_rate: u16,
    ): ItemProductionUpdated {
        ItemProductionUpdated {
            item_production_id: item_production_id(item_production),
            version: version(item_production),
            production_materials,
            requirements_level,
            base_quantity,
            base_experience,
            base_creation_time,
            energy_cost,
            success_rate,
        }
    }


    public(friend) fun create_item_production(
        store_address: address,
        item_production_id: SkillTypeItemIdPair,
        production_materials: ItemIdQuantityPairs,
        requirements_level: u16,
        base_quantity: u32,
        base_experience: u32,
        base_creation_time: u64,
        energy_cost: u64,
        success_rate: u16,
    ): ItemProduction acquires Tables {
        asset_item_production_not_exists(store_address, item_production_id);
        let item_production = new_item_production(
            item_production_id,
            production_materials,
            requirements_level,
            base_quantity,
            base_experience,
            base_creation_time,
            energy_cost,
            success_rate,
        );
        item_production
    }

    public(friend) fun asset_item_production_not_exists(
        store_address: address, item_production_id: SkillTypeItemIdPair,
    ) acquires Tables {
        assert!(exists<Tables>(store_address), ENotInitialized);
        let tables = borrow_global_mut<Tables>(store_address);
        assert!(!table::contains(&tables.item_production_table, item_production_id), EIdAlreadyExists);
    }

    public(friend) fun update_version_and_add(store_address: address, item_production: ItemProduction) acquires Tables {
        item_production.version = item_production.version + 1;
        //assert!(item_production.version != 0, EInappropriateVersion);
        private_add_item_production(store_address, item_production);
    }

    public(friend) fun add_item_production(store_address: address, item_production: ItemProduction) acquires Tables {
        assert!(item_production.version == 0, EInappropriateVersion);
        private_add_item_production(store_address, item_production);
    }

    public(friend) fun remove_item_production(store_address: address, item_production_id: SkillTypeItemIdPair): ItemProduction acquires Tables {
        assert!(exists<Tables>(store_address), ENotInitialized);
        let tables = borrow_global_mut<Tables>(store_address);
        table::remove(&mut tables.item_production_table, item_production_id)
    }

    fun private_add_item_production(store_address: address, item_production: ItemProduction) acquires Tables {
        assert!(exists<Tables>(store_address), ENotInitialized);
        let tables = borrow_global_mut<Tables>(store_address);
        table::add(&mut tables.item_production_table, item_production.item_production_id, item_production);
    }

    // public fun get_item_production(item_production_id: SkillTypeItemIdPair): pass_object::PassObject<ItemProduction> acquires Tables {
    //     let item_production = remove_item_production(item_production_id);
    //     pass_object::new(item_production)
    // }

    public fun return_item_production(store_address: address, item_production_pass_obj: pass_object::PassObject<ItemProduction>) acquires Tables {
        let item_production = pass_object::extract(item_production_pass_obj);
        private_add_item_production(store_address, item_production);
    }

    public(friend) fun drop_item_production(item_production: ItemProduction) {
        let ItemProduction {
            version: _version,
            item_production_id: _item_production_id,
            production_materials: _production_materials,
            requirements_level: _requirements_level,
            base_quantity: _base_quantity,
            base_experience: _base_experience,
            base_creation_time: _base_creation_time,
            energy_cost: _energy_cost,
            success_rate: _success_rate,
        } = item_production;
    }

    public fun contains_item_production(store_address: address, item_production_id: SkillTypeItemIdPair): bool acquires Tables {
        let tables = borrow_global<Tables>(store_address);
        table::contains(&tables.item_production_table, item_production_id)
    }

    public(friend) fun emit_item_production_created(store_address: address, item_production_created: ItemProductionCreated) acquires Events {
        assert!(exists<Events>(store_address), ENotInitialized);
        let events = borrow_global_mut<Events>(store_address);
        event::emit_event(&mut events.item_production_created_handle, item_production_created);
    }

    public(friend) fun emit_item_production_updated(store_address: address, item_production_updated: ItemProductionUpdated) acquires Events {
        assert!(exists<Events>(store_address), ENotInitialized);
        let events = borrow_global_mut<Events>(store_address);
        event::emit_event(&mut events.item_production_updated_handle, item_production_updated);
    }

}
