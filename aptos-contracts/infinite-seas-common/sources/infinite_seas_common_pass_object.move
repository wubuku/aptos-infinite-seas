// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_seas_common::infinite_seas_common_pass_object {
    use std::option::{Self, Option};

    friend infinite_seas_common::item;
    friend infinite_seas_common::item_creation;
    friend infinite_seas_common::item_production;
    friend infinite_seas_common::experience_table;

    const EIncorrectUsage: u64 = 101;

    /// read-only 'hot potato' wrapper.
    struct PassObject<T> {
        value: T,
        object_address: Option<address>,
    }

    public(friend) fun new<T>(value: T): PassObject<T> {
        PassObject { value, object_address: option::none() }
    }

    public(friend) fun new_with_address<T>(value: T, object_address: address): PassObject<T> {
        PassObject { value, object_address: option::some(object_address) }
    }

    public(friend) fun extract<T>(pass_object: PassObject<T>): T {
        let PassObject { value, object_address } = pass_object;
        assert!(option::is_none(&object_address), EIncorrectUsage);
        value
    }

    /// Alias of `extract` function.
    public(friend) fun extract_value<T>(pass_object: PassObject<T>): T {
        extract(pass_object)
    }

    public(friend) fun extract_value_and_address<T>(pass_object: PassObject<T>): (T, address) {
        let PassObject { value, object_address } = pass_object;
        assert!(option::is_some(&object_address), EIncorrectUsage);
        (value, option::extract(&mut object_address))
    }

    public fun borrow<T>(pass_object: &PassObject<T>): &T {
        &pass_object.value
    }

    /// Alias of `borrow` function.
    public fun borrow_value<T>(pass_object: &PassObject<T>): &T {
        borrow(pass_object)
    }

    public fun object_address<T>(pass_object: &PassObject<T>): Option<address> {
        pass_object.object_address
    }
}

