// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_seas_common::item_aggregate {
    use infinite_seas_common::item;
    use infinite_seas_common::item_create_logic;
    use infinite_seas_common::item_update_logic;
    use std::string::String;

    const ENotPublisher: u64 = 50;

    public entry fun create(
        account: &signer,
        store_address: address,
        item_id: u32,
        name: String,
        required_for_completion: bool,
        sells_for: u32,
    ) {
        assert!(std::signer::address_of(account) == @infinite_seas_common, ENotPublisher);
        let item_created = item_create_logic::verify(
            account,
            store_address,
            item_id,
            name,
            required_for_completion,
            sells_for,
        );
        let item = item_create_logic::mutate(
            account,
            store_address,
            &item_created,
        );
        item::add_item(store_address, item);
        item::emit_item_created(store_address, item_created);
    }

    public entry fun update(
        account: &signer,
        store_address: address,
        item_id: u32,
        name: String,
        required_for_completion: bool,
        sells_for: u32,
    ) {
        assert!(std::signer::address_of(account) == @infinite_seas_common, ENotPublisher);
        let item = item::remove_item(store_address, item_id);
        let item_updated = item_update_logic::verify(
            account,
            store_address,
            name,
            required_for_completion,
            sells_for,
            &item,
        );
        let updated_item = item_update_logic::mutate(
            account,
            &item_updated,
            item,
        );
        item::update_version_and_add(store_address, updated_item);
        item::emit_item_updated(store_address, item_updated);
    }

}
