// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_seas_common::experience_table_aggregate {
    use infinite_seas_common::experience_table;
    use infinite_seas_common::experience_table_add_level_logic;
    use infinite_seas_common::experience_table_update_level_logic;

    const ENotPublisher: u64 = 50;

    public entry fun add_level(
        account: &signer,
        store_address: address,
        level: u16,
        experience: u32,
        difference: u32,
    ) {
        assert!(std::signer::address_of(account) == @infinite_seas_common, ENotPublisher);
        let experience_level_added = experience_table_add_level_logic::verify(
            account,
            store_address,
            level,
            experience,
            difference,
        );
        experience_table_add_level_logic::mutate(
            account,
            store_address,
            &experience_level_added,
        );
        experience_table::emit_experience_level_added(store_address, experience_level_added);
    }

    public entry fun update_level(
        account: &signer,
        store_address: address,
        level: u16,
        experience: u32,
        difference: u32,
    ) {
        assert!(std::signer::address_of(account) == @infinite_seas_common, ENotPublisher);
        let experience_level_updated = experience_table_update_level_logic::verify(
            account,
            store_address,
            level,
            experience,
            difference,
        );
        experience_table_update_level_logic::mutate(
            account,
            store_address,
            &experience_level_updated,
        );
        experience_table::emit_experience_level_updated(store_address, experience_level_updated);
    }

}
