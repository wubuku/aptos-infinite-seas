// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_seas::map_aggregate {
    use aptos_framework::object::Object;
    use infinite_seas::map;
    use infinite_seas::map_add_island_logic;
    use infinite_seas::map_claim_island_logic;
    use infinite_seas::map_gather_island_resources_logic;
    use infinite_seas::player::Player;
    use infinite_seas_common::coordinates::{Self, Coordinates};
    use infinite_seas_common::item_id_quantity_pairs::{Self, ItemIdQuantityPairs};

    friend infinite_seas::player_claim_island_logic;

    const ENotPublisher: u64 = 50;

    public entry fun add_island(
        account: &signer,
        coordinates_x: u32,
        coordinates_y: u32,
        resources_item_id_list: vector<u32>,
        resources_item_quantity_list: vector<u32>,
    ) {
        assert!(std::signer::address_of(account) == @infinite_seas, ENotPublisher);
        let coordinates: Coordinates = coordinates::new(
            coordinates_x,
            coordinates_y,
        );
        let resources: ItemIdQuantityPairs = item_id_quantity_pairs::new(
            resources_item_id_list,
            resources_item_quantity_list,
        );
        let map = map::remove_map();
        let island_added = map_add_island_logic::verify(
            account,
            coordinates,
            resources,
            &map,
        );
        let updated_map = map_add_island_logic::mutate(
            account,
            &island_added,
            map,
        );
        map::update_version_and_add(updated_map);
        map::emit_island_added(island_added);
    }

    public(friend) fun claim_island(
        account: &signer,
        coordinates: Coordinates,
        claimed_by: address,
        claimed_at: u64,
    ) {
        let map = map::remove_map();
        let map_island_claimed = map_claim_island_logic::verify(
            account,
            coordinates,
            claimed_by,
            claimed_at,
            &map,
        );
        let updated_map = map_claim_island_logic::mutate(
            account,
            &map_island_claimed,
            map,
        );
        map::update_version_and_add(updated_map);
        map::emit_map_island_claimed(map_island_claimed);
    }

    public entry fun gather_island_resources(
        account: &signer,
        player: Object<Player>,
    ) {
        let map = map::remove_map();
        let island_resources_gathered = map_gather_island_resources_logic::verify(
            account,
            player,
            &map,
        );
        let updated_map = map_gather_island_resources_logic::mutate(
            account,
            &island_resources_gathered,
            map,
        );
        map::update_version_and_add(updated_map);
        map::emit_island_resources_gathered(island_resources_gathered);
    }

}
