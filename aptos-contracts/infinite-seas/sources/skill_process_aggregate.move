// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_seas::skill_process_aggregate {
    use aptos_framework::object::{Self, Object};
    use infinite_seas::genesis_account;
    use infinite_seas::player::Player;
    use infinite_seas::skill_process::{Self, SkillProcess};
    use infinite_seas::skill_process_create_logic;
    use infinite_seas::skill_process_start_production_logic;
    use infinite_seas_common::skill_process_id::{Self, SkillProcessId};
    use infinite_seas_common::skill_type_item_id_pair::{Self, SkillTypeItemIdPair};

    friend infinite_seas::player_claim_island_logic;

    const EMismatchedObjectSeed: u64 = 150;

    public entry fun create(
        account: &signer,
        skill_process_id_skill_type: u8,
        skill_process_id_player_id: address,
        skill_process_id_sequence_number: u8,
    ) {
        let skill_process_id: SkillProcessId = skill_process_id::new(
            skill_process_id_skill_type,
            skill_process_id_player_id,
            skill_process_id_sequence_number,
        );
        let skill_process_created = skill_process_create_logic::verify(
            account,
            skill_process_id,
        );
        let constructor_ref = object::create_named_object(&genesis_account::resource_account_signer(), std::bcs::to_bytes(&skill_process_id));
        let object_signer = object::generate_signer(&constructor_ref);
        let extend_ref = object::generate_extend_ref(&constructor_ref);
        let transfer_ref = object::generate_transfer_ref(&constructor_ref);
        object::disable_ungated_transfer(&transfer_ref);
        let id = object::address_from_constructor_ref(&constructor_ref);
        let skill_process = skill_process_create_logic::mutate(
            account,
            &skill_process_created,
            id,
        );
        assert!(skill_process_id == skill_process::skill_process_id(&skill_process), EMismatchedObjectSeed);
        skill_process::add_skill_process(&object_signer, skill_process);
        skill_process::save_object_controller(&object_signer,
            extend_ref,
            transfer_ref,
        );
        skill_process::set_skill_process_created_id(&mut skill_process_created, id);
        skill_process::emit_skill_process_created(skill_process_created);
    }

    public entry fun start_production(
        account: &signer,
        skill_process_obj: Object<SkillProcess>,
        batch_size: u32,
        player: Object<Player>,
        item_production_id_skill_type: u8,
        item_production_id_item_id: u32,
    ) {
        let item_production_id: SkillTypeItemIdPair = skill_type_item_id_pair::new(
            item_production_id_skill_type,
            item_production_id_item_id,
        );
        let id = object::object_address(&skill_process_obj);
        let skill_process = skill_process::remove_skill_process(id);
        let production_process_started = skill_process_start_production_logic::verify(
            account,
            batch_size,
            player,
            item_production_id,
            id,
            &skill_process,
        );
        let updated_skill_process = skill_process_start_production_logic::mutate(
            account,
            &production_process_started,
            id,
            skill_process,
        );
        skill_process::update_version_and_add(id, updated_skill_process);
        skill_process::emit_production_process_started(production_process_started);
    }

}
