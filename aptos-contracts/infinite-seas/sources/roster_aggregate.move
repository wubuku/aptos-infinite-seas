// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_seas::roster_aggregate {
    use aptos_framework::object::{Self, Object};
    use infinite_seas::genesis_account;
    use infinite_seas::roster::{Self, Roster};
    use infinite_seas::roster_create_logic;
    use infinite_seas_common::coordinates::Coordinates;
    use infinite_seas_common::roster_id::RosterId;
    use std::option::{Self, Option};
    use std::vector;

    friend infinite_seas::player_create_logic;
    friend infinite_seas::player_claim_island_logic;

    const EMismatchedObjectSeed: u64 = 150;

    public(friend) fun create(
        account: &signer,
        roster_id: RosterId,
        status: u8,
        speed: u32,
        updated_coordinates: Coordinates,
        coordinates_updated_at: u64,
        target_coordinates: Option<Coordinates>,
        origin_coordinates: Option<Coordinates>,
        ship_battle_id: Option<address>,
    ): Object<roster::Roster> {
        let roster_created = roster_create_logic::verify(
            account,
            roster_id,
            status,
            speed,
            updated_coordinates,
            coordinates_updated_at,
            target_coordinates,
            origin_coordinates,
            ship_battle_id,
        );
        let constructor_ref = object::create_named_object(&genesis_account::resource_account_signer(), std::bcs::to_bytes(&roster_id));
        let object_signer = object::generate_signer(&constructor_ref);
        let extend_ref = object::generate_extend_ref(&constructor_ref);
        let transfer_ref = object::generate_transfer_ref(&constructor_ref);
        object::disable_ungated_transfer(&transfer_ref);
        let id = object::address_from_constructor_ref(&constructor_ref);
        let roster = roster_create_logic::mutate(
            account,
            &mut roster_created,
            id,
        );
        assert!(roster_id == roster::roster_id(&roster), EMismatchedObjectSeed);
        roster::add_roster(&object_signer, roster);
        roster::save_object_controller(&object_signer,
            extend_ref,
            transfer_ref,
        );
        roster::set_roster_created_id(&mut roster_created, id);
        roster::emit_roster_created(roster_created);
        object::address_to_object(id)
    }

    fun vector_to_option<V : drop>(v: vector<V>): Option<V> {
        if (vector::length(&v) == 0) { option::none() } else {
            option::some(
                vector::pop_back(&mut v)
            )
        }
    }

}
