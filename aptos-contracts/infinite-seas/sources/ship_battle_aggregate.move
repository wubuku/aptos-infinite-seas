// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module infinite_seas::ship_battle_aggregate {
    use aptos_framework::object::{Self, Object};
    use infinite_seas::player::Player;
    use infinite_seas::roster::Roster;
    use infinite_seas::ship_battle::{Self, ShipBattle};
    use infinite_seas::ship_battle_initiate_battle_logic;
    use infinite_seas::ship_battle_make_move_logic;
    use infinite_seas_common::coordinates::Coordinates;
    use std::signer;

    public fun initiate_battle(
        account: &signer,
        player: Object<Player>,
        initiator: Object<Roster>,
        responder: Object<Roster>,
        initiator_coordinates: Coordinates,
        responder_coordinates: Coordinates,
    ): Object<ship_battle::ShipBattle> {
        let ship_battle_initiated = ship_battle_initiate_battle_logic::verify(
            account,
            player,
            initiator,
            responder,
            initiator_coordinates,
            responder_coordinates,
        );
        let account_address = signer::address_of(account);
        let constructor_ref = object::create_object(account_address);
        let object_signer = object::generate_signer(&constructor_ref);
        let extend_ref = object::generate_extend_ref(&constructor_ref);
        let delete_ref = object::generate_delete_ref(&constructor_ref);
        let id = object::address_from_constructor_ref(&constructor_ref);
        let ship_battle = ship_battle_initiate_battle_logic::mutate(
            account,
            &mut ship_battle_initiated,
            id,
        );
        ship_battle::add_ship_battle(&object_signer, ship_battle);
        ship_battle::save_object_controller(&object_signer,
            extend_ref,
            delete_ref,
        );
        ship_battle::set_ship_battle_initiated_id(&mut ship_battle_initiated, id);
        ship_battle::emit_ship_battle_initiated(ship_battle_initiated);
        object::address_to_object(id)
    }

    public entry fun make_move(
        account: &signer,
        ship_battle_obj: Object<ShipBattle>,
        player: Object<Player>,
        initiator: Object<Roster>,
        responder: Object<Roster>,
        attacker_command: u8,
    ) {
        let id = object::object_address(&ship_battle_obj);
        let ship_battle = ship_battle::remove_ship_battle(id);
        let ship_battle_move_made = ship_battle_make_move_logic::verify(
            account,
            player,
            initiator,
            responder,
            attacker_command,
            id,
            &ship_battle,
        );
        let updated_ship_battle = ship_battle_make_move_logic::mutate(
            account,
            &mut ship_battle_move_made,
            id,
            ship_battle,
        );
        ship_battle::update_version_and_add(id, updated_ship_battle);
        ship_battle::emit_ship_battle_move_made(ship_battle_move_made);
    }

}
