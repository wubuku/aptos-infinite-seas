aggregates:
  Ship:
    metadata:
      HasStoreAbility: true
      Preprocessors: [ "MOVE_CRUD_IT" ]
      CRUD_IT_NO_UPDATE: true
      CRUD_IT_NO_DELETE: true
      #ShouldIssuePublisherObject: true
      DataAccessFriends:
        - ShipBattle.MakeMove
        - ShipBattle.TakeLoot
        - Roster.AddShip
        - Roster.CreateEnvironmentRoster
        - Roster.TransferShip
        - Roster.PutInShipInventory
        - Roster.TakeOutShipInventory
        - Roster.TransferShipInventory
    friends:
      - SkillProcess.CompleteShipProduction
      - Roster.CreateEnvironmentRoster
    id:
      name: Id
      type: AptosObjectID
    properties:
      Owner:
        type: address # PlayerId
      HealthPoints:
        type: u32
      Attack:
        type: u32
      Protection:
        type: u32
      Speed:
        type: u32
      BuildingExpenses:
        type: ItemIdQuantityPairs
      Inventory:
        itemType: ItemIdQuantityPair
        defaultLogic:
          Move: "std::vector::empty()"
    methods:
      Create:
        isInternal: true
        result:
          isObjectReturned: true
        #event:
        #  isObjectShared: true # Share the object after created.


  Roster:
    metadata:
      IsNonTransferableAptosObject: true
      #HasStoreAbility: true
      Preprocessors: [ "MOVE_CRUD_IT" ]
      CRUD_IT_NO_UPDATE: true
      CRUD_IT_NO_DELETE: true
      ShouldIssuePublisherObject: true
      IS_MOVE_SCHEMA_VERSIONED: true
      DataAccessFriends:
        # Make some methods can access ("write") Roster's data model.
        # This should only be done occasionally!
        - ShipBattle.InitiateBattle
        - ShipBattle.MakeMove
        - ShipBattle.TakeLoot
    friends:
      - Player.Create
      - Player.ClaimIsland
      - SkillProcess.CompleteShipProduction
      #- ShipBattle.InitiateBattle
    id:
      name: Id
      type: AptosObjectID
      generator:
        class: AptosObject
        isNamedObject: true
        creatorType: ResourceAccount
        seed:
          "__Property__": "RosterId"
    properties:
      RosterId:
        type: RosterId
      Status:
        type: u8
      Speed:
        type: u32
      ShipIds:
        itemType: address # Ship ID
        defaultLogic:
          Move: "std::vector::empty()"
      #Ships:
      #  type: ObjectTable<ID, Ship>
      #  typeArguments:
      #    - # not set for ID
      #    - persistenceType: JsonObject
      UpdatedCoordinates:
        type: Coordinates
        description: "The last updated coordinates"
      CoordinatesUpdatedAt:
        type: u64
      TargetCoordinates:
        type: Coordinates
        optional: true
      OriginCoordinates:
        type: Coordinates
        optional: true
      SailDuration:
        type: u64
        defaultLogic:
          Move: "0"
      ShipBattleId:
        type: address
        optional: true
      EnvironmentOwned:
        type: bool
        description: "Whether the roster is owned by the environment"
        defaultLogic:
          Move: "false"
      BaseExperience:
        type: u32
        optional: true
        description: "The base experience value gained by the player when the roster is destroyed"
        defaultLogic:
          Move: "std::option::none()"
      #TODO: EnergyVault:
      #  type: "Balance<ENERGY>"
    methods:
      Create:
        isInternal: true
        result:
          isObjectReturned: true
        #event:
        #  isObjectShared: true # Share the object after created.

      CreateEnvironmentRoster:
        isCreationCommand: true
        requiredPermission: "__Publisher__"
        #metadata:
        #  ParametersIncludedInMutationFunction: [ "Clock" ]
        parameters:
          RosterId:
            type: RosterId
          Coordinates:
            type: Coordinates
          ShipResourceQuantity:
            type: u32
          ShipBaseResourceQuantity:
            type: u32
          BaseExperience:
            type: u32
          #Clock:
          #  referenceType: Clock
          #  isIgnoredInEvent: true
        event:
          name: EnvironmentRosterCreated
          #isObjectShared: true

      AddShip:
        isInternal: true
        parameters:
          Ship:
            type: Object<Ship>
          Position:
            type: u64
            optional: true
        event:
          name: RosterShipAdded

      SetSail:
        #requiredPermission: "__ObjectOwner__"
        parameters:
          Player:
            type: Object<Player> #referenceType: Player
            eventPropertyName: PlayerId #isIgnoredInEvent: true
          TargetCoordinates:
            type: Coordinates
          #Clock:
          #  referenceType: Clock
          #  isIgnoredInEvent: true
          #Energy:
          #  type: "Balance<ENERGY>"
          #  eventPropertyName: EnergyCost
          SailDuration:
            type: u64
          UpdatedCoordinates:
            type: Coordinates
        event:
          name: RosterSetSail
          properties:
            SetSailAt:
              type: u64
            UpdatedCoordinates:
              type: Coordinates
            EnergyCost:
              type: u64

      #       UpdateLocation:
      #         parameters:
      #           #Clock:
      #           #  referenceType: Clock
      #           #  isIgnoredInEvent: true
      #           UpdatedCoordinates:
      #             type: Coordinates
      #         event:
      #           name: RosterLocationUpdated
      #           properties:
      #             UpdatedCoordinates:
      #               type: Coordinates
      #             CoordinatesUpdatedAt:
      #               type: u64
      #             NewStatus:
      #               type: u8
      #             #OldStatus:
      #             #  type: u8

      AdjustShipsPosition:
        parameters:
          Player:
            type: Object<Player> #referenceType: Player
            eventPropertyName: PlayerId #isIgnoredInEvent: true
          Positions:
            itemType: u64
          ShipIds:
            itemType: address
        event:
          name: RosterShipsPositionAdjusted

      TransferShip:
        parameters:
          Player:
            type: Object<Player> #referenceType: Player
            eventPropertyName: PlayerId # The player object address
          ShipId:
            type: address
          #FromRoster: # from current roster
          ToRoster:
            type: Object<Roster> #referenceType: Roster
            #isMutableReference: true
            eventPropertyName: ToRoster # The object address of "ToRoster"
          ToPosition:
            type: u64
            optional: true
        event:
          name: RosterShipTransferred

      TransferShipInventory:
        parameters:
          Player:
            type: Object<Player> #referenceType: Player
            eventPropertyName: PlayerId #isIgnoredInEvent: true
          FromShipId:
            type: address
          ToShipId:
            type: address
          ItemIdQuantityPairs:
            type: ItemIdQuantityPairs
        event:
          name: RosterShipInventoryTransferred

      TakeOutShipInventory:
        metadata:
          ObjectMutableInVerificationFunction: true
        inheritsFrom: RosterTemplate.InOutShipInventory
        #parameters:
        event:
          name: RosterShipInventoryTakenOut

      PutInShipInventory:
        metadata:
          ObjectMutableInVerificationFunction: true
        inheritsFrom: RosterTemplate.InOutShipInventory
        #parameters:
        event:
          name: RosterShipInventoryPutIn


  ShipBattle:
    metadata:
      IsNonTransferableAptosObject: true
    id:
      name: Id
      type: AptosObjectID
    properties:
      Initiator:
        type: address # Roster ID
      Responder:
        type: address # Roster ID
      Status:
        type: u8
      InitiatorExperiences:
        # The experiences Initiator has gained during the battle
        itemType: u32
        isList: true
        defaultLogic:
          Move: "std::vector::empty()"
      ResponderExperiences:
        itemType: u32
        isList: true
        defaultLogic:
          Move: "std::vector::empty()"
      EndedAt:
        type: u64
        optional: true
        defaultLogic:
          Move: "std::option::none()"
      Winner:
        type: u8
        optional: true
        description: "1: Initiator, 0: Responder"
        defaultLogic:
          Move: "std::option::none()"
      RoundNumber:
        type: u32
        defaultLogic:
          Move: "1"
      RoundStartedAt:
        type: u64
      RoundMover:
        type: u8
        optional: true
        description: "1: Initiator, 0: Responder"
      RoundAttackerShip:
        type: address
        optional: true
      RoundDefenderShip:
        type: address
        optional: true
    methods:
      InitiateBattle:
        isCreationCommand: true
        parameters:
          Player:
            type: Object<Player> #referenceType: Player
            eventPropertyName: PlayerId #isIgnoredInEvent: true
          Initiator:
            type: Object<Roster> #referenceType: Roster
            #isMutableReference: true
            eventPropertyName: InitiatorId #isIgnoredInEvent: true
          Responder:
            type: Object<Roster> #referenceType: Roster
            #isMutableReference: true
            eventPropertyName: ResponderId #isIgnoredInEvent: true
          #Clock:
          #  referenceType: Clock
          #  isIgnoredInEvent: true
          InitiatorCoordinates:
            type: Coordinates
          ResponderCoordinates:
            type: Coordinates
        result:
          isObjectReturned: true
        event:
          name: ShipBattleInitiated
          #isObjectShared: true
          properties:
            InitiatorId:
              type: address
            ResponderId:
              type: address
            PlayerId:
              type: address
            StartedAt:
              type: u64
            FirstRoundMover:
              type: u8
              optional: true
            FirstRoundAttackerShip:
              type: address
              optional: true
            FirstRoundDefenderShip:
              type: address
              optional: true

      MakeMove:
        parameters:
          Player:
            type: Object<Player> #referenceType: Player
            eventPropertyName: PlayerId #isIgnoredInEvent: true
          Initiator:
            type: Object<Roster> #referenceType: Roster
            #isMutableReference: true
            eventPropertyName: InitiatorId #isIgnoredInEvent: true
          Responder:
            type: Object<Roster> #referenceType: Roster
            #isMutableReference: true
            eventPropertyName: ResponderId #isIgnoredInEvent: true
          #Clock:
          #  referenceType: Clock
          #  isIgnoredInEvent: true
          AttackerCommand:
            type: ShipBattleCommand
        event:
          name: ShipBattleMoveMade
          properties:
            InitiatorId:
              type: address
            ResponderId:
              type: address
            PlayerId:
              type: address
            DefenderCommand:
              type: ShipBattleCommand
            RoundNumber:
              type: u32
            DefenderDamageTaken:
              type: u32
            AttackerDamageTaken:
              type: u32
            IsBattleEnded:
              type: bool
            Winner:
              type: u8
              optional: true
              description: "1: Initiator, 0: Responder"
            NextRoundStartedAt:
              type: u64
            NextRoundMover:
              type: u8
              optional: true
            NextRoundAttackerShip:
              type: address
              optional: true
            NextRoundDefenderShip:
              type: address
              optional: true

      TakeLoot:
        parameters:
          Player:
            type: Object<Player> #referenceType: Player
            #isMutableReference: true
            eventPropertyName: PlayerId #isIgnoredInEvent: true
          LoserPlayer:
            type: Object<Player> #referenceType: Player
            #isMutableReference: true
            eventPropertyName: LoserPlayerId #isIgnoredInEvent: true
          Initiator:
            type: Object<Roster> #referenceType: Roster
            #isMutableReference: true
            eventPropertyName: InitiatorId #isIgnoredInEvent: true
          Responder:
            type: Object<Roster> #referenceType: Roster
            #isMutableReference: true
            eventPropertyName: ResponderId #isIgnoredInEvent: true
          #ExperienceTable:
          #  referenceType: ExperienceTable
          #  isIgnoredInEvent: true
          #Clock:
          #  referenceType: Clock
          #  isIgnoredInEvent: true
          #Winner:
          #  type: u8 # 1: Initiator, 0: Responder
          Choice:
            type: u8
            description: "1: Take all, 0: Leave it"
        event:
          name: ShipBattleLootTaken
          properties:
            InitiatorId:
              type: address
            ResponderId:
              type: address
            PlayerId:
              type: address
            LoserPlayerId:
              type: address
            Loot:
              itemType: ItemIdQuantityPair
            LootedAt:
              type: u64
              description: "The time when the loot is taken"
            IncreasedExperience:
              type: u32
            NewLevel:
              type: u16
            LoserIncreasedExperience:
              type: u32
            LoserNewLevel:
              type: u16

superObjects:
  RosterTemplate:
    isTemplate: true
    methods:
      InOutShipInventory:
        parameters:
          Player:
            type: Object<Player> #referenceType: Player
            #isMutableReference: true
            eventPropertyName: PlayerId #isIgnoredInEvent: true
          #Clock:
          #  referenceType: Clock
          #  isIgnoredInEvent: true
          ShipId:
            type: address
          ItemIdQuantityPairs:
            type: ItemIdQuantityPairs
          UpdatedCoordinates:
            type: Coordinates
